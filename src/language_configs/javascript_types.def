// JavaScript node type mappings
// Format: DEF_TYPE(raw_type, normalized_type, name_extraction, value_extraction, flags)

// Function definitions
DEF_TYPE(function_declaration, FUNCTION_DECLARATION, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE(function_expression, FUNCTION_DECLARATION, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE(arrow_function, FUNCTION_DECLARATION, NONE, NONE, 0)
DEF_TYPE(method_definition, METHOD_DECLARATION, FIND_PROPERTY, NONE, 0)

// Class definitions
DEF_TYPE(class_declaration, CLASS_DECLARATION, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE(class_expression, CLASS_DECLARATION, FIND_IDENTIFIER, NONE, 0)

// Variable declarations
DEF_TYPE(variable_declaration, VARIABLE_DECLARATION, NONE, NONE, 0)
DEF_TYPE(variable_declarator, VARIABLE_DECLARATION, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE(lexical_declaration, VARIABLE_DECLARATION, NONE, NONE, 0)

// Function calls and expressions
DEF_TYPE(call_expression, FUNCTION_CALL, NONE, NONE, 0)
DEF_TYPE(binary_expression, BINARY_EXPRESSION, NONE, NONE, 0)
DEF_TYPE(unary_expression, UNARY_EXPRESSION, NONE, NONE, 0)
DEF_TYPE(assignment_expression, ASSIGNMENT_EXPRESSION, NONE, NONE, 0)
DEF_TYPE(update_expression, ASSIGNMENT_EXPRESSION, NONE, NONE, 0)

// Identifiers and references
DEF_TYPE(identifier, IDENTIFIER, NODE_TEXT, NONE, 0)
DEF_TYPE(property_identifier, IDENTIFIER, NODE_TEXT, NONE, 0)
DEF_TYPE(member_expression, VARIABLE_REFERENCE, NONE, NONE, 0)
DEF_TYPE(subscript_expression, VARIABLE_REFERENCE, NONE, NONE, 0)

// Literals
DEF_TYPE(string, STRING_LITERAL, NONE, NODE_TEXT, NodeFlags::IS_LITERAL)
DEF_TYPE(template_string, STRING_LITERAL, NONE, NODE_TEXT, NodeFlags::IS_LITERAL)
DEF_TYPE(number, NUMBER_LITERAL, NONE, NODE_TEXT, NodeFlags::IS_LITERAL)
DEF_TYPE(true, BOOLEAN_LITERAL, NONE, NODE_TEXT, NodeFlags::IS_LITERAL)
DEF_TYPE(false, BOOLEAN_LITERAL, NONE, NODE_TEXT, NodeFlags::IS_LITERAL)
DEF_TYPE(null, NULL_LITERAL, NONE, NODE_TEXT, NodeFlags::IS_LITERAL)
DEF_TYPE(undefined, NULL_LITERAL, NONE, NODE_TEXT, NodeFlags::IS_LITERAL)

// Control flow
DEF_TYPE(if_statement, IF_STATEMENT, NONE, NONE, 0)
DEF_TYPE(for_statement, FOR_STATEMENT, NONE, NONE, 0)
DEF_TYPE(for_in_statement, FOR_STATEMENT, NONE, NONE, 0)
DEF_TYPE(while_statement, WHILE_STATEMENT, NONE, NONE, 0)
DEF_TYPE(do_statement, WHILE_STATEMENT, NONE, NONE, 0)
DEF_TYPE(return_statement, RETURN_STATEMENT, NONE, NONE, 0)
DEF_TYPE(break_statement, BREAK_STATEMENT, NONE, NONE, 0)
DEF_TYPE(continue_statement, CONTINUE_STATEMENT, NONE, NONE, 0)

// Structure
DEF_TYPE(statement_block, BLOCK, NONE, NONE, 0)
DEF_TYPE(program, MODULE, NONE, NONE, 0)
DEF_TYPE(import_statement, IMPORT_STATEMENT, NONE, NONE, 0)
DEF_TYPE(export_statement, EXPORT_STATEMENT, NONE, NONE, 0)

// Comments
DEF_TYPE(comment, COMMENT, NONE, NODE_TEXT, 0)

// Keywords (marked with IS_KEYWORD flag)
DEF_TYPE(function, FUNCTION_DECLARATION, NONE, NONE, NodeFlags::IS_KEYWORD)
DEF_TYPE(class, CLASS_DECLARATION, NONE, NONE, NodeFlags::IS_KEYWORD)
DEF_TYPE(var, VARIABLE_DECLARATION, NONE, NONE, NodeFlags::IS_KEYWORD)
DEF_TYPE(let, VARIABLE_DECLARATION, NONE, NONE, NodeFlags::IS_KEYWORD)
DEF_TYPE(const, VARIABLE_DECLARATION, NONE, NONE, NodeFlags::IS_KEYWORD)
DEF_TYPE(if, IF_STATEMENT, NONE, NONE, NodeFlags::IS_KEYWORD)
DEF_TYPE(else, IF_STATEMENT, NONE, NONE, NodeFlags::IS_KEYWORD)
DEF_TYPE(for, FOR_STATEMENT, NONE, NONE, NodeFlags::IS_KEYWORD)
DEF_TYPE(while, WHILE_STATEMENT, NONE, NONE, NodeFlags::IS_KEYWORD)
DEF_TYPE(do, WHILE_STATEMENT, NONE, NONE, NodeFlags::IS_KEYWORD)
DEF_TYPE(return, RETURN_STATEMENT, NONE, NONE, NodeFlags::IS_KEYWORD)
DEF_TYPE(break, BREAK_STATEMENT, NONE, NONE, NodeFlags::IS_KEYWORD)
DEF_TYPE(continue, CONTINUE_STATEMENT, NONE, NONE, NodeFlags::IS_KEYWORD)
DEF_TYPE(import, IMPORT_STATEMENT, NONE, NONE, NodeFlags::IS_KEYWORD)
DEF_TYPE(export, EXPORT_STATEMENT, NONE, NONE, NodeFlags::IS_KEYWORD)

// Punctuation (marked with IS_PUNCTUATION flag)
DEF_TYPE("(", PUNCTUATION, NONE, NONE, NodeFlags::IS_PUNCTUATION)
DEF_TYPE(")", PUNCTUATION, NONE, NONE, NodeFlags::IS_PUNCTUATION)
DEF_TYPE("[", PUNCTUATION, NONE, NONE, NodeFlags::IS_PUNCTUATION)
DEF_TYPE("]", PUNCTUATION, NONE, NONE, NodeFlags::IS_PUNCTUATION)
DEF_TYPE("{", PUNCTUATION, NONE, NONE, NodeFlags::IS_PUNCTUATION)
DEF_TYPE("}", PUNCTUATION, NONE, NONE, NodeFlags::IS_PUNCTUATION)
DEF_TYPE(",", PUNCTUATION, NONE, NONE, NodeFlags::IS_PUNCTUATION)
DEF_TYPE(";", PUNCTUATION, NONE, NONE, NodeFlags::IS_PUNCTUATION)
DEF_TYPE(".", PUNCTUATION, NONE, NONE, NodeFlags::IS_PUNCTUATION)

// Operators
DEF_TYPE("+", OPERATOR, NONE, NODE_TEXT, 0)
DEF_TYPE("-", OPERATOR, NONE, NODE_TEXT, 0)
DEF_TYPE("*", OPERATOR, NONE, NODE_TEXT, 0)
DEF_TYPE("/", OPERATOR, NONE, NODE_TEXT, 0)
DEF_TYPE("=", OPERATOR, NONE, NODE_TEXT, 0)
DEF_TYPE("==", OPERATOR, NONE, NODE_TEXT, 0)
DEF_TYPE("===", OPERATOR, NONE, NODE_TEXT, 0)
DEF_TYPE("!=", OPERATOR, NONE, NODE_TEXT, 0)
DEF_TYPE("!==", OPERATOR, NONE, NODE_TEXT, 0)
DEF_TYPE("<", OPERATOR, NONE, NODE_TEXT, 0)
DEF_TYPE(">", OPERATOR, NONE, NODE_TEXT, 0)
DEF_TYPE("<=", OPERATOR, NONE, NODE_TEXT, 0)
DEF_TYPE(">=", OPERATOR, NONE, NODE_TEXT, 0)