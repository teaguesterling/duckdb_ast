// JavaScript node type mappings
// Format: DEF_TYPE(raw_type, semantic_type, name_extraction, value_extraction, flags)

// Function definitions
DEF_TYPE(function_declaration, DEFINITION_FUNCTION, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE(arrow_function, DEFINITION_FUNCTION, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE(function_expression, DEFINITION_FUNCTION, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE(method_definition, DEFINITION_FUNCTION, FIND_IDENTIFIER, NONE, 0)

// Class definitions  
DEF_TYPE(class_declaration, DEFINITION_CLASS, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE(class_expression, DEFINITION_CLASS, FIND_IDENTIFIER, NONE, 0)

// Variable declarations
DEF_TYPE(variable_declaration, DEFINITION_VARIABLE, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE(lexical_declaration, DEFINITION_VARIABLE, FIND_IDENTIFIER, NONE, 0)

// Function calls and expressions
DEF_TYPE(call_expression, COMPUTATION_CALL, NONE, NONE, 0)
DEF_TYPE(new_expression, COMPUTATION_CALL, NONE, NONE, 0)
DEF_TYPE(binary_expression, OPERATOR_ARITHMETIC, NONE, NONE, 0)
DEF_TYPE(unary_expression, OPERATOR_ARITHMETIC, NONE, NONE, 0)
DEF_TYPE(assignment_expression, OPERATOR_ASSIGNMENT, NONE, NONE, 0)
DEF_TYPE(update_expression, OPERATOR_ARITHMETIC, NONE, NONE, 0)

// Member access
DEF_TYPE(member_expression, COMPUTATION_ACCESS, NONE, NONE, 0)
DEF_TYPE(subscript_expression, COMPUTATION_ACCESS, NONE, NONE, 0)

// Identifiers and references
DEF_TYPE(identifier, NAME_IDENTIFIER, NODE_TEXT, NONE, 0)
DEF_TYPE(property_identifier, NAME_IDENTIFIER, NODE_TEXT, NONE, 0)

// Literals
DEF_TYPE(string, LITERAL_STRING, NONE, NODE_TEXT, NodeFlags::IS_LITERAL)
DEF_TYPE(template_string, LITERAL_STRING, NONE, NODE_TEXT, NodeFlags::IS_LITERAL)
DEF_TYPE(number, LITERAL_NUMBER, NONE, NODE_TEXT, NodeFlags::IS_LITERAL)
DEF_TYPE(true, LITERAL_ATOMIC, NONE, NODE_TEXT, NodeFlags::IS_LITERAL)
DEF_TYPE(false, LITERAL_ATOMIC, NONE, NODE_TEXT, NodeFlags::IS_LITERAL)
DEF_TYPE(null, LITERAL_ATOMIC, NONE, NODE_TEXT, NodeFlags::IS_LITERAL)
DEF_TYPE(undefined, LITERAL_ATOMIC, NONE, NODE_TEXT, NodeFlags::IS_LITERAL)
DEF_TYPE(array, LITERAL_STRUCTURED, NONE, NONE, 0)
DEF_TYPE(object, LITERAL_STRUCTURED, NONE, NONE, 0)

// Control flow
DEF_TYPE(if_statement, FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE(switch_statement, FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE(conditional_expression, FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE(for_statement, FLOW_LOOP, NONE, NONE, 0)
DEF_TYPE(for_in_statement, FLOW_LOOP, NONE, NONE, 0)
DEF_TYPE(for_of_statement, FLOW_LOOP, NONE, NONE, 0)
DEF_TYPE(while_statement, FLOW_LOOP, NONE, NONE, 0)
DEF_TYPE(do_statement, FLOW_LOOP, NONE, NONE, 0)
DEF_TYPE(return_statement, FLOW_JUMP, NONE, NONE, 0)
DEF_TYPE(break_statement, FLOW_JUMP, NONE, NONE, 0)
DEF_TYPE(continue_statement, FLOW_JUMP, NONE, NONE, 0)

// Async/sync constructs
DEF_TYPE(await_expression, FLOW_SYNC, NONE, NONE, 0)
DEF_TYPE(yield_expression, FLOW_SYNC, NONE, NONE, 0)

// Error handling
DEF_TYPE(try_statement, ERROR_TRY, NONE, NONE, 0)
DEF_TYPE(catch_clause, ERROR_CATCH, NONE, NONE, 0)
DEF_TYPE(throw_statement, ERROR_THROW, NONE, NONE, 0)
DEF_TYPE(finally_clause, ERROR_FINALLY, NONE, NONE, 0)

// Structure/Organization
DEF_TYPE(statement_block, ORGANIZATION_BLOCK, NONE, NONE, 0)
DEF_TYPE(program, DEFINITION_MODULE, NONE, NONE, 0)
DEF_TYPE(import_statement, EXTERNAL_IMPORT, NONE, NONE, 0)
DEF_TYPE(export_statement, EXTERNAL_EXPORT, NONE, NONE, 0)

// Comments
DEF_TYPE(comment, METADATA_COMMENT, NONE, NODE_TEXT, 0)

// Keywords (marked with IS_KEYWORD flag)
DEF_TYPE(function, NAME_KEYWORD, NONE, NONE, NodeFlags::IS_KEYWORD)
DEF_TYPE(class, NAME_KEYWORD, NONE, NONE, NodeFlags::IS_KEYWORD)
DEF_TYPE(const, NAME_KEYWORD, NONE, NONE, NodeFlags::IS_KEYWORD)
DEF_TYPE(let, NAME_KEYWORD, NONE, NONE, NodeFlags::IS_KEYWORD)
DEF_TYPE(var, NAME_KEYWORD, NONE, NONE, NodeFlags::IS_KEYWORD)
DEF_TYPE(if, NAME_KEYWORD, NONE, NONE, NodeFlags::IS_KEYWORD)
DEF_TYPE(else, NAME_KEYWORD, NONE, NONE, NodeFlags::IS_KEYWORD)
DEF_TYPE(for, NAME_KEYWORD, NONE, NONE, NodeFlags::IS_KEYWORD)
DEF_TYPE(while, NAME_KEYWORD, NONE, NONE, NodeFlags::IS_KEYWORD)
DEF_TYPE(return, NAME_KEYWORD, NONE, NONE, NodeFlags::IS_KEYWORD)
DEF_TYPE(async, NAME_KEYWORD, NONE, NONE, NodeFlags::IS_KEYWORD)
DEF_TYPE(await, NAME_KEYWORD, NONE, NONE, NodeFlags::IS_KEYWORD)
DEF_TYPE(import, NAME_KEYWORD, NONE, NONE, NodeFlags::IS_KEYWORD)
DEF_TYPE(export, NAME_KEYWORD, NONE, NONE, NodeFlags::IS_KEYWORD)

// Punctuation (marked with IS_PUNCTUATION flag)
DEF_TYPE("(", PARSER_PUNCTUATION, NONE, NONE, NodeFlags::IS_PUNCTUATION)
DEF_TYPE(")", PARSER_PUNCTUATION, NONE, NONE, NodeFlags::IS_PUNCTUATION)
DEF_TYPE("[", PARSER_PUNCTUATION, NONE, NONE, NodeFlags::IS_PUNCTUATION)
DEF_TYPE("]", PARSER_PUNCTUATION, NONE, NONE, NodeFlags::IS_PUNCTUATION)
DEF_TYPE("{", PARSER_PUNCTUATION, NONE, NONE, NodeFlags::IS_PUNCTUATION)
DEF_TYPE("}", PARSER_PUNCTUATION, NONE, NONE, NodeFlags::IS_PUNCTUATION)
DEF_TYPE(",", PARSER_DELIMITER, NONE, NONE, NodeFlags::IS_PUNCTUATION)
DEF_TYPE(";", PARSER_DELIMITER, NONE, NONE, NodeFlags::IS_PUNCTUATION)
DEF_TYPE(".", PARSER_DELIMITER, NONE, NONE, NodeFlags::IS_PUNCTUATION)

// Operators
DEF_TYPE("+", OPERATOR_ARITHMETIC, NONE, NODE_TEXT, 0)
DEF_TYPE("-", OPERATOR_ARITHMETIC, NONE, NODE_TEXT, 0)
DEF_TYPE("*", OPERATOR_ARITHMETIC, NONE, NODE_TEXT, 0)
DEF_TYPE("/", OPERATOR_ARITHMETIC, NONE, NODE_TEXT, 0)
DEF_TYPE("%", OPERATOR_ARITHMETIC, NONE, NODE_TEXT, 0)
DEF_TYPE("**", OPERATOR_ARITHMETIC, NONE, NODE_TEXT, 0)
DEF_TYPE("=", OPERATOR_ASSIGNMENT, NONE, NODE_TEXT, 0)
DEF_TYPE("+=", OPERATOR_ASSIGNMENT, NONE, NODE_TEXT, 0)
DEF_TYPE("-=", OPERATOR_ASSIGNMENT, NONE, NODE_TEXT, 0)
DEF_TYPE("==", OPERATOR_COMPARISON, NONE, NODE_TEXT, 0)
DEF_TYPE("===", OPERATOR_COMPARISON, NONE, NODE_TEXT, 0)
DEF_TYPE("!=", OPERATOR_COMPARISON, NONE, NODE_TEXT, 0)
DEF_TYPE("!==", OPERATOR_COMPARISON, NONE, NODE_TEXT, 0)
DEF_TYPE("<", OPERATOR_COMPARISON, NONE, NODE_TEXT, 0)
DEF_TYPE(">", OPERATOR_COMPARISON, NONE, NODE_TEXT, 0)
DEF_TYPE("<=", OPERATOR_COMPARISON, NONE, NODE_TEXT, 0)
DEF_TYPE(">=", OPERATOR_COMPARISON, NONE, NODE_TEXT, 0)
DEF_TYPE("&&", OPERATOR_LOGICAL, NONE, NODE_TEXT, 0)
DEF_TYPE("||", OPERATOR_LOGICAL, NONE, NODE_TEXT, 0)
DEF_TYPE("!", OPERATOR_LOGICAL, NONE, NODE_TEXT, 0)