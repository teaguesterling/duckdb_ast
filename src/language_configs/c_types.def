// C language node type definitions
// Format: DEF_TYPE(raw_type, semantic_type, name_strategy, value_strategy, flags)

// Translation unit
DEF_TYPE(translation_unit, DEFINITION_MODULE, NONE, NONE, 0x01)

// Preprocessor directives
DEF_TYPE(preproc_include, EXTERNAL_IMPORT, NODE_TEXT, NONE, 0x01)
DEF_TYPE(preproc_def, DEFINITION_VARIABLE, FIND_IDENTIFIER, NONE, 0x01)
DEF_TYPE(preproc_function_def, DEFINITION_FUNCTION, FIND_IDENTIFIER, NONE, 0x01)
DEF_TYPE(preproc_call, COMPUTATION_CALL, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE(preproc_if, FLOW_CONDITIONAL, NONE, NONE, 0x01)
DEF_TYPE(preproc_ifdef, FLOW_CONDITIONAL, FIND_IDENTIFIER, NONE, 0x01)
DEF_TYPE(preproc_else, FLOW_CONDITIONAL, NONE, NONE, 0x01)
DEF_TYPE(preproc_elif, FLOW_CONDITIONAL, NONE, NONE, 0x01)
DEF_TYPE(preproc_params, ORGANIZATION_LIST, NONE, NONE, 0)

// Declarations
DEF_TYPE(function_definition, DEFINITION_FUNCTION, FIND_IDENTIFIER, NONE, 0x01)
DEF_TYPE(declaration, DEFINITION_VARIABLE, FIND_IDENTIFIER, NONE, 0x01)
DEF_TYPE(struct_specifier, DEFINITION_CLASS, FIND_IDENTIFIER, NONE, 0x01)
DEF_TYPE(union_specifier, DEFINITION_CLASS, FIND_IDENTIFIER, NONE, 0x01)
DEF_TYPE(enum_specifier, DEFINITION_CLASS, FIND_IDENTIFIER, NONE, 0x01)
DEF_TYPE(typedef_declaration, DEFINITION_CLASS, FIND_IDENTIFIER, NONE, 0x01)
DEF_TYPE(field_declaration, DEFINITION_VARIABLE, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE(enumerator, DEFINITION_VARIABLE, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE(parameter_declaration, DEFINITION_VARIABLE, FIND_IDENTIFIER, NONE, 0)

// Type specifiers
DEF_TYPE(primitive_type, TYPE_PRIMITIVE, NODE_TEXT, NONE, 0)
DEF_TYPE(type_identifier, TYPE_REFERENCE, NODE_TEXT, NONE, 0)
DEF_TYPE(sized_type_specifier, TYPE_PRIMITIVE, NODE_TEXT, NONE, 0)
DEF_TYPE(pointer_declarator, TYPE_COMPOSITE, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE(array_declarator, TYPE_COMPOSITE, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE(function_declarator, TYPE_COMPOSITE, FIND_IDENTIFIER, NONE, 0)

// Statements
DEF_TYPE(compound_statement, ORGANIZATION_BLOCK, NONE, NONE, 0)
DEF_TYPE(labeled_statement, EXECUTION_STATEMENT, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE(expression_statement, EXECUTION_STATEMENT, NONE, NONE, 0)
DEF_TYPE(if_statement, FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE(switch_statement, FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE(case_statement, FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE(while_statement, FLOW_LOOP, NONE, NONE, 0)
DEF_TYPE(for_statement, FLOW_LOOP, NONE, NONE, 0)
DEF_TYPE(do_statement, FLOW_LOOP, NONE, NONE, 0)
DEF_TYPE(goto_statement, FLOW_JUMP, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE(continue_statement, FLOW_JUMP, NONE, NONE, 0)
DEF_TYPE(break_statement, FLOW_JUMP, NONE, NONE, 0)
DEF_TYPE(return_statement, FLOW_JUMP, NONE, NONE, 0)

// Expressions
DEF_TYPE(call_expression, COMPUTATION_CALL, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE(field_expression, COMPUTATION_ACCESS, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE(subscript_expression, COMPUTATION_ACCESS, NONE, NONE, 0)
DEF_TYPE(assignment_expression, OPERATOR_ASSIGNMENT, NONE, NONE, 0)
DEF_TYPE(binary_expression, OPERATOR_ARITHMETIC, NONE, NONE, 0)
DEF_TYPE(unary_expression, OPERATOR_ARITHMETIC, NONE, NONE, 0)
DEF_TYPE(update_expression, OPERATOR_ARITHMETIC, NONE, NONE, 0)
DEF_TYPE(cast_expression, COMPUTATION_EXPRESSION, NONE, NONE, 0)
DEF_TYPE(sizeof_expression, OPERATOR_ARITHMETIC, NONE, NONE, 0)
DEF_TYPE(conditional_expression, FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE(comma_expression, ORGANIZATION_LIST, NONE, NONE, 0)

// Identifiers and literals
DEF_TYPE(identifier, NAME_IDENTIFIER, NODE_TEXT, NONE, 0)
DEF_TYPE(number_literal, LITERAL_NUMBER, NODE_TEXT, NODE_TEXT, 0)
DEF_TYPE(char_literal, LITERAL_STRING, NODE_TEXT, NODE_TEXT, 0)
DEF_TYPE(string_literal, LITERAL_STRING, NODE_TEXT, NODE_TEXT, 0)
DEF_TYPE(concatenated_string, LITERAL_STRING, NODE_TEXT, NODE_TEXT, 0)
DEF_TYPE(true, LITERAL_ATOMIC, NODE_TEXT, NODE_TEXT, 0)
DEF_TYPE(false, LITERAL_ATOMIC, NODE_TEXT, NODE_TEXT, 0)
DEF_TYPE(null, LITERAL_ATOMIC, NODE_TEXT, NODE_TEXT, 0)

// Comments
DEF_TYPE(comment, METADATA_COMMENT, NODE_TEXT, NODE_TEXT, 0x08)

// Storage class specifiers
DEF_TYPE(storage_class_specifier, METADATA_ANNOTATION, NODE_TEXT, NONE, 0)
DEF_TYPE(type_qualifier, METADATA_ANNOTATION, NODE_TEXT, NONE, 0)

// Declarators
DEF_TYPE(init_declarator, DEFINITION_VARIABLE, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE(abstract_declarator, TYPE_COMPOSITE, NONE, NONE, 0)
DEF_TYPE(parenthesized_declarator, TYPE_COMPOSITE, FIND_IDENTIFIER, NONE, 0)

// Special
DEF_TYPE(variadic_parameter, DEFINITION_VARIABLE, NODE_TEXT, NONE, 0)
DEF_TYPE(attribute_specifier, METADATA_ANNOTATION, NODE_TEXT, NONE, 0)
DEF_TYPE(ms_declspec_modifier, METADATA_ANNOTATION, NODE_TEXT, NONE, 0)