// C++ node type mappings
// Format: DEF_TYPE(raw_type, semantic_type, name_extraction, value_extraction, flags)

// Function definitions
DEF_TYPE(function_definition, DEFINITION_FUNCTION, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE(function_declarator, DEFINITION_FUNCTION, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE(method_definition, DEFINITION_FUNCTION, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE(constructor_definition, DEFINITION_FUNCTION, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE(destructor_definition, DEFINITION_FUNCTION, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE(lambda_expression, DEFINITION_FUNCTION, NONE, NONE, 0)

// Class/struct definitions  
DEF_TYPE(class_specifier, DEFINITION_CLASS, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE(struct_specifier, DEFINITION_CLASS, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE(union_specifier, DEFINITION_CLASS, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE(enum_specifier, DEFINITION_CLASS, FIND_IDENTIFIER, NONE, 0)

// Variable declarations
DEF_TYPE(declaration, DEFINITION_VARIABLE, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE(parameter_declaration, DEFINITION_VARIABLE, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE(field_declaration, DEFINITION_VARIABLE, FIND_IDENTIFIER, NONE, 0)

// Namespace/module
DEF_TYPE(namespace_definition, DEFINITION_MODULE, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE(translation_unit, DEFINITION_MODULE, NONE, NONE, 0)

// Function calls and expressions
DEF_TYPE(call_expression, COMPUTATION_CALL, NONE, NONE, 0)
DEF_TYPE(new_expression, COMPUTATION_CALL, NONE, NONE, 0)
DEF_TYPE(delete_expression, COMPUTATION_CALL, NONE, NONE, 0)
DEF_TYPE(binary_expression, OPERATOR_ARITHMETIC, NONE, NONE, 0)
DEF_TYPE(unary_expression, OPERATOR_ARITHMETIC, NONE, NONE, 0)
DEF_TYPE(assignment_expression, OPERATOR_ASSIGNMENT, NONE, NONE, 0)
DEF_TYPE(update_expression, OPERATOR_ARITHMETIC, NONE, NONE, 0)
DEF_TYPE(cast_expression, COMPUTATION_EXPRESSION, NONE, NONE, 0)

// Member access
DEF_TYPE(field_expression, COMPUTATION_ACCESS, NONE, NONE, 0)
DEF_TYPE(subscript_expression, COMPUTATION_ACCESS, NONE, NONE, 0)
DEF_TYPE(pointer_expression, COMPUTATION_ACCESS, NONE, NONE, 0)

// Identifiers and references
DEF_TYPE(identifier, NAME_IDENTIFIER, NODE_TEXT, NONE, 0)
DEF_TYPE(field_identifier, NAME_IDENTIFIER, NODE_TEXT, NONE, 0)
DEF_TYPE(namespace_identifier, NAME_QUALIFIED, NODE_TEXT, NONE, 0)
DEF_TYPE(qualified_identifier, NAME_QUALIFIED, NODE_TEXT, NONE, 0)
DEF_TYPE(scoped_identifier, NAME_SCOPED, NODE_TEXT, NONE, 0)

// Types
DEF_TYPE(primitive_type, TYPE_PRIMITIVE, NODE_TEXT, NONE, 0)
DEF_TYPE(type_identifier, TYPE_PRIMITIVE, NODE_TEXT, NONE, 0)
DEF_TYPE(sized_type_specifier, TYPE_PRIMITIVE, NODE_TEXT, NONE, 0)
DEF_TYPE(struct_type, TYPE_COMPOSITE, NONE, NONE, 0)
DEF_TYPE(union_type, TYPE_COMPOSITE, NONE, NONE, 0)
DEF_TYPE(pointer_type, TYPE_REFERENCE, NONE, NONE, 0)
DEF_TYPE(reference_type, TYPE_REFERENCE, NONE, NONE, 0)
DEF_TYPE(template_type, TYPE_GENERIC, NONE, NONE, 0)
DEF_TYPE(auto, TYPE_GENERIC, NONE, NONE, 0)

// Literals
DEF_TYPE(string_literal, LITERAL_STRING, NONE, NODE_TEXT, NodeFlags::IS_LITERAL)
DEF_TYPE(raw_string_literal, LITERAL_STRING, NONE, NODE_TEXT, NodeFlags::IS_LITERAL)
DEF_TYPE(char_literal, LITERAL_STRING, NONE, NODE_TEXT, NodeFlags::IS_LITERAL)
DEF_TYPE(number_literal, LITERAL_NUMBER, NONE, NODE_TEXT, NodeFlags::IS_LITERAL)
DEF_TYPE(true, LITERAL_ATOMIC, NONE, NODE_TEXT, NodeFlags::IS_LITERAL)
DEF_TYPE(false, LITERAL_ATOMIC, NONE, NODE_TEXT, NodeFlags::IS_LITERAL)
DEF_TYPE(nullptr, LITERAL_ATOMIC, NONE, NODE_TEXT, NodeFlags::IS_LITERAL)
DEF_TYPE(null, LITERAL_ATOMIC, NONE, NODE_TEXT, NodeFlags::IS_LITERAL)
DEF_TYPE(initializer_list, LITERAL_STRUCTURED, NONE, NONE, 0)

// Control flow
DEF_TYPE(if_statement, FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE(switch_statement, FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE(conditional_expression, FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE(for_statement, FLOW_LOOP, NONE, NONE, 0)
DEF_TYPE(for_range_loop, FLOW_LOOP, NONE, NONE, 0)
DEF_TYPE(while_statement, FLOW_LOOP, NONE, NONE, 0)
DEF_TYPE(do_statement, FLOW_LOOP, NONE, NONE, 0)
DEF_TYPE(return_statement, FLOW_JUMP, NONE, NONE, 0)
DEF_TYPE(break_statement, FLOW_JUMP, NONE, NONE, 0)
DEF_TYPE(continue_statement, FLOW_JUMP, NONE, NONE, 0)
DEF_TYPE(goto_statement, FLOW_JUMP, NONE, NONE, 0)

// Async/sync constructs (C++20)
DEF_TYPE(co_await_expression, FLOW_SYNC, NONE, NONE, 0)
DEF_TYPE(co_yield_expression, FLOW_SYNC, NONE, NONE, 0)
DEF_TYPE(co_return_statement, FLOW_SYNC, NONE, NONE, 0)

// Error handling
DEF_TYPE(try_statement, ERROR_TRY, NONE, NONE, 0)
DEF_TYPE(catch_clause, ERROR_CATCH, NONE, NONE, 0)
DEF_TYPE(throw_statement, ERROR_THROW, NONE, NONE, 0)

// Structure/Organization
DEF_TYPE(compound_statement, ORGANIZATION_BLOCK, NONE, NONE, 0)
DEF_TYPE(parameter_list, ORGANIZATION_LIST, NONE, NONE, 0)
DEF_TYPE(argument_list, ORGANIZATION_LIST, NONE, NONE, 0)
DEF_TYPE(template_parameter_list, ORGANIZATION_LIST, NONE, NONE, 0)

// External/Import
DEF_TYPE(preproc_include, EXTERNAL_IMPORT, NONE, NODE_TEXT, 0)
DEF_TYPE(using_declaration, EXTERNAL_IMPORT, NONE, NONE, 0)

// Preprocessor/Metadata
DEF_TYPE(preproc_def, METADATA_DIRECTIVE, NONE, NODE_TEXT, 0)
DEF_TYPE(preproc_ifdef, METADATA_DIRECTIVE, NONE, NONE, 0)
DEF_TYPE(preproc_ifndef, METADATA_DIRECTIVE, NONE, NONE, 0)
DEF_TYPE(comment, METADATA_COMMENT, NONE, NODE_TEXT, 0)

// Keywords (marked with IS_KEYWORD flag)
DEF_TYPE(class, NAME_KEYWORD, NONE, NONE, NodeFlags::IS_KEYWORD)
DEF_TYPE(struct, NAME_KEYWORD, NONE, NONE, NodeFlags::IS_KEYWORD)
DEF_TYPE(union, NAME_KEYWORD, NONE, NONE, NodeFlags::IS_KEYWORD)
DEF_TYPE(enum, NAME_KEYWORD, NONE, NONE, NodeFlags::IS_KEYWORD)
DEF_TYPE(namespace, NAME_KEYWORD, NONE, NONE, NodeFlags::IS_KEYWORD)
DEF_TYPE(if, NAME_KEYWORD, NONE, NONE, NodeFlags::IS_KEYWORD)
DEF_TYPE(else, NAME_KEYWORD, NONE, NONE, NodeFlags::IS_KEYWORD)
DEF_TYPE(for, NAME_KEYWORD, NONE, NONE, NodeFlags::IS_KEYWORD)
DEF_TYPE(while, NAME_KEYWORD, NONE, NONE, NodeFlags::IS_KEYWORD)
DEF_TYPE(return, NAME_KEYWORD, NONE, NONE, NodeFlags::IS_KEYWORD)
DEF_TYPE(const, NAME_KEYWORD, NONE, NONE, NodeFlags::IS_KEYWORD)
DEF_TYPE(static, NAME_KEYWORD, NONE, NONE, NodeFlags::IS_KEYWORD)
DEF_TYPE(virtual, NAME_KEYWORD, NONE, NONE, NodeFlags::IS_KEYWORD)
DEF_TYPE(private, NAME_KEYWORD, NONE, NONE, NodeFlags::IS_KEYWORD)
DEF_TYPE(public, NAME_KEYWORD, NONE, NONE, NodeFlags::IS_KEYWORD)
DEF_TYPE(protected, NAME_KEYWORD, NONE, NONE, NodeFlags::IS_KEYWORD)

// Punctuation (marked with IS_PUNCTUATION flag)
DEF_TYPE("(", PARSER_PUNCTUATION, NONE, NONE, NodeFlags::IS_PUNCTUATION)
DEF_TYPE(")", PARSER_PUNCTUATION, NONE, NONE, NodeFlags::IS_PUNCTUATION)
DEF_TYPE("[", PARSER_PUNCTUATION, NONE, NONE, NodeFlags::IS_PUNCTUATION)
DEF_TYPE("]", PARSER_PUNCTUATION, NONE, NONE, NodeFlags::IS_PUNCTUATION)
DEF_TYPE("{", PARSER_PUNCTUATION, NONE, NONE, NodeFlags::IS_PUNCTUATION)
DEF_TYPE("}", PARSER_PUNCTUATION, NONE, NONE, NodeFlags::IS_PUNCTUATION)
DEF_TYPE(",", PARSER_DELIMITER, NONE, NONE, NodeFlags::IS_PUNCTUATION)
DEF_TYPE(";", PARSER_DELIMITER, NONE, NONE, NodeFlags::IS_PUNCTUATION)
DEF_TYPE("::", PARSER_DELIMITER, NONE, NONE, NodeFlags::IS_PUNCTUATION)
DEF_TYPE(".", PARSER_DELIMITER, NONE, NONE, NodeFlags::IS_PUNCTUATION)
DEF_TYPE("->", PARSER_DELIMITER, NONE, NONE, NodeFlags::IS_PUNCTUATION)

// Arithmetic operators
DEF_TYPE("+", OPERATOR_ARITHMETIC, NONE, NODE_TEXT, 0)
DEF_TYPE("-", OPERATOR_ARITHMETIC, NONE, NODE_TEXT, 0)
DEF_TYPE("*", OPERATOR_ARITHMETIC, NONE, NODE_TEXT, 0)
DEF_TYPE("/", OPERATOR_ARITHMETIC, NONE, NODE_TEXT, 0)
DEF_TYPE("%", OPERATOR_ARITHMETIC, NONE, NODE_TEXT, 0)
DEF_TYPE("&", OPERATOR_ARITHMETIC, NONE, NODE_TEXT, 0)
DEF_TYPE("|", OPERATOR_ARITHMETIC, NONE, NODE_TEXT, 0)
DEF_TYPE("^", OPERATOR_ARITHMETIC, NONE, NODE_TEXT, 0)
DEF_TYPE("~", OPERATOR_ARITHMETIC, NONE, NODE_TEXT, 0)
DEF_TYPE("<<", OPERATOR_ARITHMETIC, NONE, NODE_TEXT, 0)
DEF_TYPE(">>", OPERATOR_ARITHMETIC, NONE, NODE_TEXT, 0)
DEF_TYPE("++", OPERATOR_ARITHMETIC, NONE, NODE_TEXT, 0)
DEF_TYPE("--", OPERATOR_ARITHMETIC, NONE, NODE_TEXT, 0)

// Logical operators
DEF_TYPE("&&", OPERATOR_LOGICAL, NONE, NODE_TEXT, 0)
DEF_TYPE("||", OPERATOR_LOGICAL, NONE, NODE_TEXT, 0)
DEF_TYPE("!", OPERATOR_LOGICAL, NONE, NODE_TEXT, 0)

// Comparison operators
DEF_TYPE("==", OPERATOR_COMPARISON, NONE, NODE_TEXT, 0)
DEF_TYPE("!=", OPERATOR_COMPARISON, NONE, NODE_TEXT, 0)
DEF_TYPE("<", OPERATOR_COMPARISON, NONE, NODE_TEXT, 0)
DEF_TYPE(">", OPERATOR_COMPARISON, NONE, NODE_TEXT, 0)
DEF_TYPE("<=", OPERATOR_COMPARISON, NONE, NODE_TEXT, 0)
DEF_TYPE(">=", OPERATOR_COMPARISON, NONE, NODE_TEXT, 0)

// Assignment operators
DEF_TYPE("=", OPERATOR_ASSIGNMENT, NONE, NODE_TEXT, 0)
DEF_TYPE("+=", OPERATOR_ASSIGNMENT, NONE, NODE_TEXT, 0)
DEF_TYPE("-=", OPERATOR_ASSIGNMENT, NONE, NODE_TEXT, 0)
DEF_TYPE("*=", OPERATOR_ASSIGNMENT, NONE, NODE_TEXT, 0)
DEF_TYPE("/=", OPERATOR_ASSIGNMENT, NONE, NODE_TEXT, 0)
DEF_TYPE("%=", OPERATOR_ASSIGNMENT, NONE, NODE_TEXT, 0)
DEF_TYPE("&=", OPERATOR_ASSIGNMENT, NONE, NODE_TEXT, 0)
DEF_TYPE("|=", OPERATOR_ASSIGNMENT, NONE, NODE_TEXT, 0)
DEF_TYPE("^=", OPERATOR_ASSIGNMENT, NONE, NODE_TEXT, 0)
DEF_TYPE("<<=", OPERATOR_ASSIGNMENT, NONE, NODE_TEXT, 0)
DEF_TYPE(">>=", OPERATOR_ASSIGNMENT, NONE, NODE_TEXT, 0)