// C++ node type mappings
// Format: DEF_TYPE(raw_type, semantic_type, name_extraction, value_extraction, flags)

// Function definitions
DEF_TYPE(function_definition, DEFINITION_FUNCTION, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE(function_declarator, DEFINITION_FUNCTION, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE(method_definition, DEFINITION_FUNCTION, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE(constructor_definition, DEFINITION_FUNCTION, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE(destructor_definition, DEFINITION_FUNCTION, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE(lambda_expression, DEFINITION_FUNCTION, NONE, NONE, 0)

// Class/struct definitions  
DEF_TYPE(class_specifier, DEFINITION_CLASS, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE(struct_specifier, DEFINITION_CLASS, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE(union_specifier, DEFINITION_CLASS, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE(enum_specifier, DEFINITION_CLASS, FIND_IDENTIFIER, NONE, 0)

// Variable declarations
DEF_TYPE(declaration, DEFINITION_VARIABLE, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE(parameter_declaration, DEFINITION_VARIABLE, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE(field_declaration, DEFINITION_VARIABLE, FIND_IDENTIFIER, NONE, 0)

// Namespace/module
DEF_TYPE(namespace_definition, DEFINITION_MODULE, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE(translation_unit, DEFINITION_MODULE, NONE, NONE, 0)

// Function calls and expressions
DEF_TYPE(call_expression, COMPUTATION_CALL, NONE, NONE, 0)
DEF_TYPE(new_expression, COMPUTATION_CALL, NONE, NONE, 0)
DEF_TYPE(delete_expression, COMPUTATION_CALL, NONE, NONE, 0)
DEF_TYPE(binary_expression, OPERATOR_ARITHMETIC, NONE, NONE, 0)
DEF_TYPE(unary_expression, OPERATOR_ARITHMETIC, NONE, NONE, 0)
DEF_TYPE(assignment_expression, OPERATOR_ASSIGNMENT, NONE, NONE, 0)
DEF_TYPE(update_expression, OPERATOR_ARITHMETIC, NONE, NONE, 0)
DEF_TYPE(cast_expression, COMPUTATION_EXPRESSION, NONE, NONE, 0)

// Member access
DEF_TYPE(field_expression, COMPUTATION_ACCESS, NONE, NONE, 0)
DEF_TYPE(subscript_expression, COMPUTATION_ACCESS, NONE, NONE, 0)
DEF_TYPE(pointer_expression, COMPUTATION_ACCESS, NONE, NONE, 0)

// Identifiers and references
DEF_TYPE(identifier, NAME_IDENTIFIER, NODE_TEXT, NONE, 0)
DEF_TYPE(field_identifier, NAME_IDENTIFIER, NODE_TEXT, NONE, 0)
DEF_TYPE(namespace_identifier, NAME_QUALIFIED, NODE_TEXT, NONE, 0)
DEF_TYPE(qualified_identifier, NAME_QUALIFIED, NODE_TEXT, NONE, 0)
DEF_TYPE(scoped_identifier, NAME_SCOPED, NODE_TEXT, NONE, 0)

// Types
DEF_TYPE(primitive_type, TYPE_PRIMITIVE, NODE_TEXT, NONE, 0)
DEF_TYPE(type_identifier, TYPE_PRIMITIVE, NODE_TEXT, NONE, 0)
DEF_TYPE(sized_type_specifier, TYPE_PRIMITIVE, NODE_TEXT, NONE, 0)
DEF_TYPE(struct_type, TYPE_COMPOSITE, NONE, NONE, 0)
DEF_TYPE(union_type, TYPE_COMPOSITE, NONE, NONE, 0)
DEF_TYPE(pointer_type, TYPE_REFERENCE, NONE, NONE, 0)
DEF_TYPE(reference_type, TYPE_REFERENCE, NONE, NONE, 0)
DEF_TYPE(template_type, TYPE_GENERIC, NONE, NONE, 0)
DEF_TYPE(auto, TYPE_GENERIC, NONE, NONE, 0)

// Literals - name and value both contain the literal text
DEF_TYPE(string_literal, LITERAL_STRING, NODE_TEXT, NODE_TEXT, NodeFlags::IS_LITERAL)
DEF_TYPE(raw_string_literal, LITERAL_STRING, NODE_TEXT, NODE_TEXT, NodeFlags::IS_LITERAL)
DEF_TYPE(char_literal, LITERAL_STRING, NODE_TEXT, NODE_TEXT, NodeFlags::IS_LITERAL)
DEF_TYPE(number_literal, LITERAL_NUMBER, NODE_TEXT, NODE_TEXT, NodeFlags::IS_LITERAL)
DEF_TYPE(true, LITERAL_ATOMIC, NODE_TEXT, NODE_TEXT, NodeFlags::IS_LITERAL)
DEF_TYPE(false, LITERAL_ATOMIC, NODE_TEXT, NODE_TEXT, NodeFlags::IS_LITERAL)
DEF_TYPE(nullptr, LITERAL_ATOMIC, NODE_TEXT, NODE_TEXT, NodeFlags::IS_LITERAL)
DEF_TYPE(null, LITERAL_ATOMIC, NODE_TEXT, NODE_TEXT, NodeFlags::IS_LITERAL)
DEF_TYPE(initializer_list, LITERAL_STRUCTURED, NONE, NONE, 0)

// Control flow
DEF_TYPE(if_statement, FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE(switch_statement, FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE(conditional_expression, FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE(for_statement, FLOW_LOOP, NONE, NONE, 0)
DEF_TYPE(for_range_loop, FLOW_LOOP, NONE, NONE, 0)
DEF_TYPE(while_statement, FLOW_LOOP, NONE, NONE, 0)
DEF_TYPE(do_statement, FLOW_LOOP, NONE, NONE, 0)
DEF_TYPE(return_statement, FLOW_JUMP, NONE, NONE, 0)
DEF_TYPE(break_statement, FLOW_JUMP, NONE, NONE, 0)
DEF_TYPE(continue_statement, FLOW_JUMP, NONE, NONE, 0)
DEF_TYPE(goto_statement, FLOW_JUMP, NONE, NONE, 0)

// Async/sync constructs (C++20)
DEF_TYPE(co_await_expression, FLOW_SYNC, NONE, NONE, 0)
DEF_TYPE(co_yield_expression, FLOW_SYNC, NONE, NONE, 0)
DEF_TYPE(co_return_statement, FLOW_SYNC, NONE, NONE, 0)

// Error handling
DEF_TYPE(try_statement, ERROR_TRY, NONE, NONE, 0)
DEF_TYPE(catch_clause, ERROR_CATCH, NONE, NONE, 0)
DEF_TYPE(throw_statement, ERROR_THROW, NONE, NONE, 0)

// Structure/Organization
DEF_TYPE(compound_statement, ORGANIZATION_BLOCK, NONE, NONE, 0)
DEF_TYPE(parameter_list, ORGANIZATION_LIST, NONE, NONE, 0)
DEF_TYPE(argument_list, ORGANIZATION_LIST, NONE, NONE, 0)
DEF_TYPE(template_parameter_list, ORGANIZATION_LIST, NONE, NONE, 0)

// External/Import
DEF_TYPE(preproc_include, EXTERNAL_IMPORT, NONE, NODE_TEXT, 0)
DEF_TYPE(using_declaration, EXTERNAL_IMPORT, NONE, NONE, 0)

// Preprocessor/Metadata
DEF_TYPE(preproc_def, METADATA_DIRECTIVE, NONE, NODE_TEXT, 0)
DEF_TYPE(preproc_ifdef, METADATA_DIRECTIVE, NONE, NONE, 0)
DEF_TYPE(preproc_ifndef, METADATA_DIRECTIVE, NONE, NONE, 0)
DEF_TYPE(comment, METADATA_COMMENT, NONE, NODE_TEXT, 0)

// ====================================
// PUNCTUATION TOKENS (12.2M misclassified nodes fix)
// ====================================

// Punctuation marks
DEF_TYPE(",", PARSER_PUNCTUATION, NODE_TEXT, NONE, 0)
DEF_TYPE(";", PARSER_PUNCTUATION, NODE_TEXT, NONE, 0)
DEF_TYPE(".", PARSER_PUNCTUATION, NODE_TEXT, NONE, 0)
DEF_TYPE(":", PARSER_PUNCTUATION, NODE_TEXT, NONE, 0)

// Delimiters
DEF_TYPE("(", PARSER_DELIMITER, NODE_TEXT, NONE, 0)
DEF_TYPE(")", PARSER_DELIMITER, NODE_TEXT, NONE, 0)
DEF_TYPE("[", PARSER_DELIMITER, NODE_TEXT, NONE, 0)
DEF_TYPE("]", PARSER_DELIMITER, NODE_TEXT, NONE, 0)
DEF_TYPE("{", PARSER_DELIMITER, NODE_TEXT, NONE, 0)
DEF_TYPE("}", PARSER_DELIMITER, NODE_TEXT, NONE, 0)
DEF_TYPE("\"", PARSER_DELIMITER, NODE_TEXT, NONE, 0)
DEF_TYPE("'", PARSER_DELIMITER, NODE_TEXT, NONE, 0)

// Assignment operators
DEF_TYPE("=", OPERATOR_ASSIGNMENT, NODE_TEXT, NONE, 0)
DEF_TYPE("+=", OPERATOR_ASSIGNMENT, NODE_TEXT, NONE, 0)
DEF_TYPE("-=", OPERATOR_ASSIGNMENT, NODE_TEXT, NONE, 0)
DEF_TYPE("*=", OPERATOR_ASSIGNMENT, NODE_TEXT, NONE, 0)
DEF_TYPE("/=", OPERATOR_ASSIGNMENT, NODE_TEXT, NONE, 0)
DEF_TYPE("%=", OPERATOR_ASSIGNMENT, NODE_TEXT, NONE, 0)
DEF_TYPE("&=", OPERATOR_ASSIGNMENT, NODE_TEXT, NONE, 0)
DEF_TYPE("|=", OPERATOR_ASSIGNMENT, NODE_TEXT, NONE, 0)
DEF_TYPE("^=", OPERATOR_ASSIGNMENT, NODE_TEXT, NONE, 0)
DEF_TYPE("<<=", OPERATOR_ASSIGNMENT, NODE_TEXT, NONE, 0)
DEF_TYPE(">>=", OPERATOR_ASSIGNMENT, NODE_TEXT, NONE, 0)

// Comparison operators
DEF_TYPE("==", OPERATOR_COMPARISON, NODE_TEXT, NONE, 0)
DEF_TYPE("!=", OPERATOR_COMPARISON, NODE_TEXT, NONE, 0)
DEF_TYPE("<", OPERATOR_COMPARISON, NODE_TEXT, NONE, 0)
DEF_TYPE(">", OPERATOR_COMPARISON, NODE_TEXT, NONE, 0)
DEF_TYPE("<=", OPERATOR_COMPARISON, NODE_TEXT, NONE, 0)
DEF_TYPE(">=", OPERATOR_COMPARISON, NODE_TEXT, NONE, 0)

// Arithmetic operators
DEF_TYPE("+", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)
DEF_TYPE("-", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)
DEF_TYPE("*", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)
DEF_TYPE("/", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)
DEF_TYPE("%", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)
DEF_TYPE("&", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)
DEF_TYPE("|", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)
DEF_TYPE("^", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)
DEF_TYPE("~", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)
DEF_TYPE("<<", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)
DEF_TYPE(">>", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)
DEF_TYPE("++", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)
DEF_TYPE("--", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)

// Logical operators
DEF_TYPE("&&", OPERATOR_LOGICAL, NODE_TEXT, NONE, 0)
DEF_TYPE("||", OPERATOR_LOGICAL, NODE_TEXT, NONE, 0)
DEF_TYPE("!", OPERATOR_LOGICAL, NODE_TEXT, NONE, 0)

// Member access
DEF_TYPE("->", COMPUTATION_ACCESS, NODE_TEXT, NONE, 0)
DEF_TYPE("::", COMPUTATION_ACCESS, NODE_TEXT, NONE, 0)

// C++ specific structural elements
DEF_TYPE(template_argument_list, ORGANIZATION_LIST, NONE, NONE, 0)
DEF_TYPE(subscript_argument_list, ORGANIZATION_LIST, NONE, NONE, 0)
DEF_TYPE(init_declarator, DEFINITION_VARIABLE, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE(type_descriptor, TYPE_COMPOSITE, NONE, NONE, 0)
DEF_TYPE(reference_declarator, TYPE_REFERENCE, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE(condition_clause, FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE(pointer_declarator, TYPE_COMPOSITE, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE(parenthesized_expression, COMPUTATION_EXPRESSION, NONE, NONE, 0)
DEF_TYPE(array_declarator, TYPE_COMPOSITE, FIND_IDENTIFIER, NONE, 0)

// C++ Keywords
DEF_TYPE("if", NAME_KEYWORD, NODE_TEXT, NONE, 0)
DEF_TYPE("else", NAME_KEYWORD, NODE_TEXT, NONE, 0)
DEF_TYPE("while", NAME_KEYWORD, NODE_TEXT, NONE, 0)
DEF_TYPE("for", NAME_KEYWORD, NODE_TEXT, NONE, 0)
DEF_TYPE("do", NAME_KEYWORD, NODE_TEXT, NONE, 0)
DEF_TYPE("switch", NAME_KEYWORD, NODE_TEXT, NONE, 0)
DEF_TYPE("case", NAME_KEYWORD, NODE_TEXT, NONE, 0)
DEF_TYPE("default", NAME_KEYWORD, NODE_TEXT, NONE, 0)
DEF_TYPE("break", NAME_KEYWORD, NODE_TEXT, NONE, 0)
DEF_TYPE("continue", NAME_KEYWORD, NODE_TEXT, NONE, 0)
DEF_TYPE("return", NAME_KEYWORD, NODE_TEXT, NONE, 0)
DEF_TYPE("goto", NAME_KEYWORD, NODE_TEXT, NONE, 0)
DEF_TYPE("try", NAME_KEYWORD, NODE_TEXT, NONE, 0)
DEF_TYPE("catch", NAME_KEYWORD, NODE_TEXT, NONE, 0)
DEF_TYPE("throw", NAME_KEYWORD, NODE_TEXT, NONE, 0)
DEF_TYPE("const", NAME_KEYWORD, NODE_TEXT, NONE, 0)
DEF_TYPE("static", NAME_KEYWORD, NODE_TEXT, NONE, 0)
DEF_TYPE("extern", NAME_KEYWORD, NODE_TEXT, NONE, 0)
DEF_TYPE("inline", NAME_KEYWORD, NODE_TEXT, NONE, 0)
DEF_TYPE("virtual", NAME_KEYWORD, NODE_TEXT, NONE, 0)
DEF_TYPE("override", NAME_KEYWORD, NODE_TEXT, NONE, 0)
DEF_TYPE("final", NAME_KEYWORD, NODE_TEXT, NONE, 0)
DEF_TYPE("public", NAME_KEYWORD, NODE_TEXT, NONE, 0)
DEF_TYPE("private", NAME_KEYWORD, NODE_TEXT, NONE, 0)
DEF_TYPE("protected", NAME_KEYWORD, NODE_TEXT, NONE, 0)
DEF_TYPE("class", NAME_KEYWORD, NODE_TEXT, NONE, 0)
DEF_TYPE("struct", NAME_KEYWORD, NODE_TEXT, NONE, 0)
DEF_TYPE("union", NAME_KEYWORD, NODE_TEXT, NONE, 0)
DEF_TYPE("enum", NAME_KEYWORD, NODE_TEXT, NONE, 0)
DEF_TYPE("namespace", NAME_KEYWORD, NODE_TEXT, NONE, 0)
DEF_TYPE("using", NAME_KEYWORD, NODE_TEXT, NONE, 0)
DEF_TYPE("typedef", NAME_KEYWORD, NODE_TEXT, NONE, 0)
DEF_TYPE("typename", NAME_KEYWORD, NODE_TEXT, NONE, 0)
DEF_TYPE("template", NAME_KEYWORD, NODE_TEXT, NONE, 0)
DEF_TYPE("sizeof", NAME_KEYWORD, NODE_TEXT, NONE, 0)
DEF_TYPE("new", NAME_KEYWORD, NODE_TEXT, NONE, 0)
DEF_TYPE("delete", NAME_KEYWORD, NODE_TEXT, NONE, 0)
DEF_TYPE("this", NAME_SCOPED, NODE_TEXT, NONE, 0)
DEF_TYPE("nullptr", LITERAL_ATOMIC, NODE_TEXT, NODE_TEXT, 0)
DEF_TYPE("true", LITERAL_ATOMIC, NODE_TEXT, NODE_TEXT, 0)
DEF_TYPE("false", LITERAL_ATOMIC, NODE_TEXT, NODE_TEXT, 0)

// Preprocessor directives
DEF_TYPE("#include", METADATA_DIRECTIVE, NODE_TEXT, NONE, 0)
DEF_TYPE("#define", METADATA_DIRECTIVE, NODE_TEXT, NONE, 0)
DEF_TYPE("#ifdef", METADATA_DIRECTIVE, NODE_TEXT, NONE, 0)
DEF_TYPE("#ifndef", METADATA_DIRECTIVE, NODE_TEXT, NONE, 0)
DEF_TYPE("#if", METADATA_DIRECTIVE, NODE_TEXT, NONE, 0)
DEF_TYPE("#else", METADATA_DIRECTIVE, NODE_TEXT, NONE, 0)
DEF_TYPE("#elif", METADATA_DIRECTIVE, NODE_TEXT, NONE, 0)
DEF_TYPE("#endif", METADATA_DIRECTIVE, NODE_TEXT, NONE, 0)
DEF_TYPE("#undef", METADATA_DIRECTIVE, NODE_TEXT, NONE, 0)
DEF_TYPE("#pragma", METADATA_DIRECTIVE, NODE_TEXT, NONE, 0)

// String/character content
DEF_TYPE("string_content", LITERAL_STRING, NODE_TEXT, NODE_TEXT, 0)
DEF_TYPE("escape_sequence", LITERAL_STRING, NODE_TEXT, NODE_TEXT, 0)
DEF_TYPE("character", LITERAL_STRING, NODE_TEXT, NODE_TEXT, 0)

// C++ specific constructs
DEF_TYPE("template_function", DEFINITION_FUNCTION, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("case_statement", FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE("else_clause", FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE("type_qualifier", METADATA_ANNOTATION, NODE_TEXT, NONE, 0)
DEF_TYPE("storage_class_specifier", METADATA_ANNOTATION, NODE_TEXT, NONE, 0)
DEF_TYPE("placeholder_type_specifier", TYPE_GENERIC, NODE_TEXT, NONE, 0)
DEF_TYPE("expression_statement", EXECUTION_STATEMENT, NONE, NONE, 0)