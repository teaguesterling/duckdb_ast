// Ruby language node type definitions
// Format: DEF_TYPE(raw_type, semantic_type, name_strategy, value_strategy, flags)

// Module and class definitions
DEF_TYPE(module, DEFINITION_MODULE, FIND_IDENTIFIER, NONE, 0x01)
DEF_TYPE(class, DEFINITION_CLASS, FIND_IDENTIFIER, NONE, 0x01)

// Method definitions
DEF_TYPE(method, DEFINITION_FUNCTION, FIND_IDENTIFIER, NONE, 0x01)
DEF_TYPE(singleton_method, DEFINITION_FUNCTION, FIND_IDENTIFIER, NONE, 0x01)
DEF_TYPE(alias, DEFINITION_FUNCTION, FIND_IDENTIFIER, NONE, 0x01)

// Variable and constant definitions
DEF_TYPE(assignment, DEFINITION_VARIABLE, FIND_IDENTIFIER, NONE, 0x01)
DEF_TYPE(operator_assignment, DEFINITION_VARIABLE, FIND_IDENTIFIER, NONE, 0x01)
DEF_TYPE(multiple_assignment, DEFINITION_VARIABLE, NONE, NONE, 0x01)
DEF_TYPE(constant, DEFINITION_VARIABLE, NODE_TEXT, NONE, 0x01)

// Expressions and calls
DEF_TYPE(call, COMPUTATION_CALL, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE(method_call, COMPUTATION_CALL, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE(chained_call, COMPUTATION_CALL, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE(element_reference, COMPUTATION_ACCESS, NONE, NONE, 0)

// Identifiers and names
DEF_TYPE(identifier, NAME_IDENTIFIER, NODE_TEXT, NONE, 0)
DEF_TYPE(constant_identifier, NAME_IDENTIFIER, NODE_TEXT, NONE, 0)
DEF_TYPE(instance_variable, NAME_IDENTIFIER, NODE_TEXT, NONE, 0)
DEF_TYPE(class_variable, NAME_IDENTIFIER, NODE_TEXT, NONE, 0)
DEF_TYPE(global_variable, NAME_IDENTIFIER, NODE_TEXT, NONE, 0)

// Literals
DEF_TYPE(integer, LITERAL_NUMBER, NONE, NODE_TEXT, 0)
DEF_TYPE(float, LITERAL_NUMBER, NONE, NODE_TEXT, 0)
DEF_TYPE(complex, LITERAL_NUMBER, NONE, NODE_TEXT, 0)
DEF_TYPE(rational, LITERAL_NUMBER, NONE, NODE_TEXT, 0)
DEF_TYPE(string, LITERAL_STRING, NONE, NODE_TEXT, 0)
DEF_TYPE(character, LITERAL_STRING, NONE, NODE_TEXT, 0)
DEF_TYPE(symbol, LITERAL_STRING, NONE, NODE_TEXT, 0)
DEF_TYPE(regex, LITERAL_STRING, NONE, NODE_TEXT, 0)
DEF_TYPE(string_array, LITERAL_STRUCTURED, NONE, NODE_TEXT, 0)
DEF_TYPE(symbol_array, LITERAL_STRUCTURED, NONE, NODE_TEXT, 0)
DEF_TYPE(true, LITERAL_ATOMIC, NONE, NODE_TEXT, 0)
DEF_TYPE(false, LITERAL_ATOMIC, NONE, NODE_TEXT, 0)
DEF_TYPE(nil, LITERAL_ATOMIC, NONE, NODE_TEXT, 0)

// Control flow
DEF_TYPE(if, FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE(unless, FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE(case, FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE(when, FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE(if_modifier, FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE(unless_modifier, FLOW_CONDITIONAL, NONE, NONE, 0)

// Loops
DEF_TYPE(while, FLOW_LOOP, NONE, NONE, 0)
DEF_TYPE(until, FLOW_LOOP, NONE, NONE, 0)
DEF_TYPE(for, FLOW_LOOP, NONE, NONE, 0)
DEF_TYPE(while_modifier, FLOW_LOOP, NONE, NONE, 0)
DEF_TYPE(until_modifier, FLOW_LOOP, NONE, NONE, 0)

// Jump statements
DEF_TYPE(return, FLOW_JUMP, NONE, NONE, 0)
DEF_TYPE(break, FLOW_JUMP, NONE, NONE, 0)
DEF_TYPE(next, FLOW_JUMP, NONE, NONE, 0)
DEF_TYPE(redo, FLOW_JUMP, NONE, NONE, 0)
DEF_TYPE(retry, FLOW_JUMP, NONE, NONE, 0)

// Error handling
DEF_TYPE(begin, ERROR_TRY, NONE, NONE, 0)
DEF_TYPE(rescue, ERROR_CATCH, NONE, NONE, 0)
DEF_TYPE(ensure, ERROR_FINALLY, NONE, NONE, 0)
DEF_TYPE(raise, ERROR_THROW, NONE, NONE, 0)

// Block and iteration constructs
DEF_TYPE(block, ORGANIZATION_BLOCK, NONE, NONE, 0)
DEF_TYPE(do_block, ORGANIZATION_BLOCK, NONE, NONE, 0)
DEF_TYPE(lambda, COMPUTATION_LAMBDA, NONE, NONE, 0)
DEF_TYPE(proc, COMPUTATION_LAMBDA, NONE, NONE, 0)

// Import/export (Ruby uses require/load)
DEF_TYPE(require, EXTERNAL_IMPORT, NONE, NODE_TEXT, 0x01)
DEF_TYPE(require_relative, EXTERNAL_IMPORT, NONE, NODE_TEXT, 0x01)
DEF_TYPE(load, EXTERNAL_IMPORT, NONE, NODE_TEXT, 0x01)

// Comments
DEF_TYPE(comment, METADATA_COMMENT, NONE, NODE_TEXT, 0x08)

// Ruby-specific constructs
DEF_TYPE(yield, FLOW_SYNC, NONE, NONE, 0)
DEF_TYPE(super, COMPUTATION_CALL, NONE, NONE, 0)
DEF_TYPE(self, NAME_SCOPED, NODE_TEXT, NONE, 0)

// Operators
DEF_TYPE(binary, OPERATOR_ARITHMETIC, NONE, NONE, 0)
DEF_TYPE(unary, OPERATOR_ARITHMETIC, NONE, NONE, 0)
DEF_TYPE(assignment_operator, OPERATOR_ASSIGNMENT, NONE, NONE, 0)