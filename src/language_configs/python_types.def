// Python node type mappings
// Format: DEF_TYPE(raw_type, semantic_type, name_extraction, value_extraction, flags)

// Function definitions
DEF_TYPE("function_definition", DEFINITION_FUNCTION, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("async_function_definition", DEFINITION_FUNCTION, FIND_IDENTIFIER, NONE, 0)

// Class definitions  
DEF_TYPE("class_definition", DEFINITION_CLASS, FIND_IDENTIFIER, NONE, 0)

// Variable declarations
DEF_TYPE("assignment", DEFINITION_VARIABLE, FIND_IDENTIFIER, NODE_TEXT, 0)

// Function calls and expressions
DEF_TYPE("call", COMPUTATION_CALL, NONE, NONE, 0)
DEF_TYPE("binary_operator", OPERATOR_ARITHMETIC, NONE, NONE, 0)
DEF_TYPE("unary_operator", OPERATOR_ARITHMETIC, NONE, NONE, 0)
DEF_TYPE("comparison_operator", OPERATOR_COMPARISON, NONE, NONE, 0)
DEF_TYPE("boolean_operator", OPERATOR_LOGICAL, NONE, NONE, 0)

// Identifiers and references
DEF_TYPE("identifier", NAME_IDENTIFIER, NODE_TEXT, NONE, 0)
DEF_TYPE("attribute", COMPUTATION_ACCESS, NODE_TEXT, NONE, 0)
DEF_TYPE("subscript", COMPUTATION_ACCESS, NONE, NONE, 0)

// Literals - name and value both contain the literal text
DEF_TYPE("string", LITERAL_STRING, NODE_TEXT, NODE_TEXT, 0)
DEF_TYPE("integer", LITERAL_NUMBER, NODE_TEXT, NODE_TEXT, 0)
DEF_TYPE("float", LITERAL_NUMBER, NODE_TEXT, NODE_TEXT, 0)
DEF_TYPE("true", LITERAL_ATOMIC, NODE_TEXT, NODE_TEXT, 0)
DEF_TYPE("false", LITERAL_ATOMIC, NODE_TEXT, NODE_TEXT, 0)
DEF_TYPE("none", LITERAL_ATOMIC, NODE_TEXT, NODE_TEXT, 0)

// Control flow
DEF_TYPE("if_statement", FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE("for_statement", FLOW_LOOP, NONE, NONE, 0)
DEF_TYPE("while_statement", FLOW_LOOP, NONE, NONE, 0)
DEF_TYPE("return_statement", FLOW_JUMP, NONE, NONE, 0)
DEF_TYPE("break_statement", FLOW_JUMP, NONE, NONE, 0)
DEF_TYPE("continue_statement", FLOW_JUMP, NONE, NONE, 0)

// Structure
DEF_TYPE("block", ORGANIZATION_BLOCK, NONE, NONE, 0)
DEF_TYPE("module", DEFINITION_MODULE, NONE, NONE, 0)
DEF_TYPE("import_statement", EXTERNAL_IMPORT, NONE, NONE, 0)
DEF_TYPE("import_from_statement", EXTERNAL_IMPORT, NONE, NONE, 0)

// Comments
DEF_TYPE("comment", METADATA_COMMENT, NONE, NODE_TEXT, 0)

// Keywords - now classified by semantic function with IS_KEYWORD flag
DEF_TYPE("def", DEFINITION_FUNCTION, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("class", DEFINITION_CLASS, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("if", FLOW_CONDITIONAL, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("else", FLOW_CONDITIONAL, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("elif", FLOW_CONDITIONAL, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("for", FLOW_LOOP, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("while", FLOW_LOOP, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("return", FLOW_JUMP, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("break", FLOW_JUMP, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("continue", FLOW_JUMP, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("import", EXTERNAL_IMPORT, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("from", EXTERNAL_IMPORT, NONE, NONE, ASTNodeFlags::IS_KEYWORD)

// Punctuation 
DEF_TYPE("(", PARSER_DELIMITER, NONE, NONE, 0)
DEF_TYPE(")", PARSER_DELIMITER, NONE, NONE, 0)
DEF_TYPE("[", PARSER_DELIMITER, NONE, NONE, 0)
DEF_TYPE("]", PARSER_DELIMITER, NONE, NONE, 0)
DEF_TYPE("{", PARSER_DELIMITER, NONE, NONE, 0)
DEF_TYPE("}", PARSER_DELIMITER, NONE, NONE, 0)
DEF_TYPE(",", PARSER_PUNCTUATION, NONE, NONE, 0)
DEF_TYPE(":", PARSER_PUNCTUATION, NONE, NONE, 0)
DEF_TYPE(";", PARSER_PUNCTUATION, NONE, NONE, 0)
DEF_TYPE(".", PARSER_PUNCTUATION, NONE, NONE, 0)

// Arithmetic operators
DEF_TYPE("+", OPERATOR_ARITHMETIC, NONE, NODE_TEXT, 0)
DEF_TYPE("-", OPERATOR_ARITHMETIC, NONE, NODE_TEXT, 0)
DEF_TYPE("*", OPERATOR_ARITHMETIC, NONE, NODE_TEXT, 0)
DEF_TYPE("/", OPERATOR_ARITHMETIC, NONE, NODE_TEXT, 0)
DEF_TYPE("%", OPERATOR_ARITHMETIC, NONE, NODE_TEXT, 0)
DEF_TYPE("**", OPERATOR_ARITHMETIC, NONE, NODE_TEXT, 0)
DEF_TYPE("//", OPERATOR_ARITHMETIC, NONE, NODE_TEXT, 0)
DEF_TYPE("@", OPERATOR_ARITHMETIC, NONE, NODE_TEXT, 0)
DEF_TYPE("&", OPERATOR_ARITHMETIC, NONE, NODE_TEXT, 0)
DEF_TYPE("|", OPERATOR_ARITHMETIC, NONE, NODE_TEXT, 0)
DEF_TYPE("^", OPERATOR_ARITHMETIC, NONE, NODE_TEXT, 0)
DEF_TYPE("~", OPERATOR_ARITHMETIC, NONE, NODE_TEXT, 0)
DEF_TYPE("<<", OPERATOR_ARITHMETIC, NONE, NODE_TEXT, 0)
DEF_TYPE(">>", OPERATOR_ARITHMETIC, NONE, NODE_TEXT, 0)

// Logical operators
DEF_TYPE("and", OPERATOR_LOGICAL, NONE, NODE_TEXT, 0)
DEF_TYPE("or", OPERATOR_LOGICAL, NONE, NODE_TEXT, 0)
DEF_TYPE("not", OPERATOR_LOGICAL, NONE, NODE_TEXT, 0)

// Comparison operators
DEF_TYPE("==", OPERATOR_COMPARISON, NONE, NODE_TEXT, 0)
DEF_TYPE("!=", OPERATOR_COMPARISON, NONE, NODE_TEXT, 0)
DEF_TYPE("<", OPERATOR_COMPARISON, NONE, NODE_TEXT, 0)
DEF_TYPE(">", OPERATOR_COMPARISON, NONE, NODE_TEXT, 0)
DEF_TYPE("<=", OPERATOR_COMPARISON, NONE, NODE_TEXT, 0)
DEF_TYPE(">=", OPERATOR_COMPARISON, NONE, NODE_TEXT, 0)
DEF_TYPE("is", OPERATOR_COMPARISON, NONE, NODE_TEXT, 0)
DEF_TYPE("in", OPERATOR_COMPARISON, NONE, NODE_TEXT, 0)

// Assignment operators
DEF_TYPE("=", OPERATOR_ASSIGNMENT, NONE, NODE_TEXT, 0)
DEF_TYPE("+=", OPERATOR_ASSIGNMENT, NONE, NODE_TEXT, 0)
DEF_TYPE("-=", OPERATOR_ASSIGNMENT, NONE, NODE_TEXT, 0)
DEF_TYPE("*=", OPERATOR_ASSIGNMENT, NONE, NODE_TEXT, 0)
DEF_TYPE("/=", OPERATOR_ASSIGNMENT, NONE, NODE_TEXT, 0)
DEF_TYPE("%=", OPERATOR_ASSIGNMENT, NONE, NODE_TEXT, 0)
DEF_TYPE("**=", OPERATOR_ASSIGNMENT, NONE, NODE_TEXT, 0)
DEF_TYPE("//=", OPERATOR_ASSIGNMENT, NONE, NODE_TEXT, 0)
DEF_TYPE("@=", OPERATOR_ASSIGNMENT, NONE, NODE_TEXT, 0)
DEF_TYPE("&=", OPERATOR_ASSIGNMENT, NONE, NODE_TEXT, 0)
DEF_TYPE("|=", OPERATOR_ASSIGNMENT, NONE, NODE_TEXT, 0)
DEF_TYPE("^=", OPERATOR_ASSIGNMENT, NONE, NODE_TEXT, 0)
DEF_TYPE("<<=", OPERATOR_ASSIGNMENT, NONE, NODE_TEXT, 0)
DEF_TYPE(">>=", OPERATOR_ASSIGNMENT, NONE, NODE_TEXT, 0)
DEF_TYPE(":=", OPERATOR_ASSIGNMENT, NONE, NODE_TEXT, 0)

// Python-specific constructs

// Variadic patterns (PATTERN_COLLECT)
DEF_TYPE("list_splat_pattern", PATTERN_COLLECT, NODE_TEXT, NONE, 0)
DEF_TYPE("dictionary_splat_pattern", PATTERN_COLLECT, NODE_TEXT, NONE, 0)
DEF_TYPE("*", PATTERN_COLLECT, NODE_TEXT, NONE, 0)
DEF_TYPE("**", PATTERN_COLLECT, NODE_TEXT, NONE, 0)

// Scoped references
DEF_TYPE("self", NAME_SCOPED, NODE_TEXT, NONE, 0)
DEF_TYPE("super", NAME_SCOPED, NODE_TEXT, NONE, 0)
DEF_TYPE("cls", NAME_SCOPED, NODE_TEXT, NONE, 0)

// Decorators and attributes 
DEF_TYPE("@", NAME_ATTRIBUTE, NODE_TEXT, NONE, 0)
DEF_TYPE("decorator", NAME_ATTRIBUTE, FIND_IDENTIFIER, NONE, 0)

// Private/public patterns based on naming convention
// Note: These would need custom logic to detect _name patterns
// For now, we'll handle them as regular identifiers

// Error handling
DEF_TYPE("try_statement", ERROR_TRY, NONE, NONE, 0)
DEF_TYPE("except_clause", ERROR_CATCH, NONE, NONE, 0)
DEF_TYPE("finally_clause", ERROR_FINALLY, NONE, NONE, 0)
DEF_TYPE("raise_statement", ERROR_THROW, NONE, NONE, 0)
DEF_TYPE("assert_statement", ERROR_THROW, NONE, NONE, 0)

// More keywords
DEF_TYPE("try", ERROR_TRY, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("except", ERROR_CATCH, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("finally", ERROR_FINALLY, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("raise", ERROR_THROW, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("assert", ERROR_THROW, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("with", FLOW_SYNC, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("as", METADATA_ANNOTATION, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("lambda", COMPUTATION_LAMBDA, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("yield", FLOW_SYNC, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("async", FLOW_SYNC, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("await", FLOW_SYNC, NONE, NONE, ASTNodeFlags::IS_KEYWORD)