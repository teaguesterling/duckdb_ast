// Python node type mappings
// Format: DEF_TYPE(raw_type, semantic_type, name_extraction, value_extraction, flags)

// Function definitions
DEF_TYPE(function_definition, DEFINITION_FUNCTION, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE(async_function_definition, DEFINITION_FUNCTION, FIND_IDENTIFIER, NONE, 0)

// Class definitions  
DEF_TYPE(class_definition, DEFINITION_CLASS, FIND_IDENTIFIER, NONE, 0)

// Variable declarations
DEF_TYPE(assignment, DEFINITION_VARIABLE, FIND_IDENTIFIER, NODE_TEXT, 0)

// Function calls and expressions
DEF_TYPE(call, COMPUTATION_CALL, NONE, NONE, 0)
DEF_TYPE(binary_operator, OPERATOR_ARITHMETIC, NONE, NONE, 0)
DEF_TYPE(unary_operator, OPERATOR_ARITHMETIC, NONE, NONE, 0)
DEF_TYPE(comparison_operator, OPERATOR_COMPARISON, NONE, NONE, 0)
DEF_TYPE(boolean_operator, OPERATOR_LOGICAL, NONE, NONE, 0)

// Identifiers and references
DEF_TYPE(identifier, NAME_IDENTIFIER, NODE_TEXT, NONE, 0)
DEF_TYPE(attribute, COMPUTATION_ACCESS, NODE_TEXT, NONE, 0)
DEF_TYPE(subscript, COMPUTATION_ACCESS, NONE, NONE, 0)

// Literals
DEF_TYPE(string, LITERAL_STRING, NONE, NODE_TEXT, NodeFlags::IS_LITERAL)
DEF_TYPE(integer, LITERAL_NUMBER, NONE, NODE_TEXT, NodeFlags::IS_LITERAL)
DEF_TYPE(float, LITERAL_NUMBER, NONE, NODE_TEXT, NodeFlags::IS_LITERAL)
DEF_TYPE(true, LITERAL_ATOMIC, NONE, NODE_TEXT, NodeFlags::IS_LITERAL)
DEF_TYPE(false, LITERAL_ATOMIC, NONE, NODE_TEXT, NodeFlags::IS_LITERAL)
DEF_TYPE(none, LITERAL_ATOMIC, NONE, NODE_TEXT, NodeFlags::IS_LITERAL)

// Control flow
DEF_TYPE(if_statement, FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE(for_statement, FLOW_LOOP, NONE, NONE, 0)
DEF_TYPE(while_statement, FLOW_LOOP, NONE, NONE, 0)
DEF_TYPE(return_statement, FLOW_JUMP, NONE, NONE, 0)
DEF_TYPE(break_statement, FLOW_JUMP, NONE, NONE, 0)
DEF_TYPE(continue_statement, FLOW_JUMP, NONE, NONE, 0)

// Structure
DEF_TYPE(block, ORGANIZATION_BLOCK, NONE, NONE, 0)
DEF_TYPE(module, DEFINITION_MODULE, NONE, NONE, 0)
DEF_TYPE(import_statement, EXTERNAL_IMPORT, NONE, NONE, 0)
DEF_TYPE(import_from_statement, EXTERNAL_IMPORT, NONE, NONE, 0)

// Comments
DEF_TYPE(comment, METADATA_COMMENT, NONE, NODE_TEXT, 0)

// Keywords (marked with IS_KEYWORD flag)
DEF_TYPE(def, NAME_KEYWORD, NONE, NONE, NodeFlags::IS_KEYWORD)
DEF_TYPE(class, NAME_KEYWORD, NONE, NONE, NodeFlags::IS_KEYWORD)
DEF_TYPE(if, NAME_KEYWORD, NONE, NONE, NodeFlags::IS_KEYWORD)
DEF_TYPE(else, NAME_KEYWORD, NONE, NONE, NodeFlags::IS_KEYWORD)
DEF_TYPE(elif, NAME_KEYWORD, NONE, NONE, NodeFlags::IS_KEYWORD)
DEF_TYPE(for, NAME_KEYWORD, NONE, NONE, NodeFlags::IS_KEYWORD)
DEF_TYPE(while, NAME_KEYWORD, NONE, NONE, NodeFlags::IS_KEYWORD)
DEF_TYPE(return, NAME_KEYWORD, NONE, NONE, NodeFlags::IS_KEYWORD)
DEF_TYPE(break, NAME_KEYWORD, NONE, NONE, NodeFlags::IS_KEYWORD)
DEF_TYPE(continue, NAME_KEYWORD, NONE, NONE, NodeFlags::IS_KEYWORD)
DEF_TYPE(import, NAME_KEYWORD, NONE, NONE, NodeFlags::IS_KEYWORD)
DEF_TYPE(from, NAME_KEYWORD, NONE, NONE, NodeFlags::IS_KEYWORD)

// Punctuation (marked with IS_PUNCTUATION flag)
DEF_TYPE("(", PARSER_PUNCTUATION, NONE, NONE, NodeFlags::IS_PUNCTUATION)
DEF_TYPE(")", PARSER_PUNCTUATION, NONE, NONE, NodeFlags::IS_PUNCTUATION)
DEF_TYPE("[", PARSER_PUNCTUATION, NONE, NONE, NodeFlags::IS_PUNCTUATION)
DEF_TYPE("]", PARSER_PUNCTUATION, NONE, NONE, NodeFlags::IS_PUNCTUATION)
DEF_TYPE("{", PARSER_PUNCTUATION, NONE, NONE, NodeFlags::IS_PUNCTUATION)
DEF_TYPE("}", PARSER_PUNCTUATION, NONE, NONE, NodeFlags::IS_PUNCTUATION)
DEF_TYPE(",", PARSER_DELIMITER, NONE, NONE, NodeFlags::IS_PUNCTUATION)
DEF_TYPE(":", PARSER_DELIMITER, NONE, NONE, NodeFlags::IS_PUNCTUATION)
DEF_TYPE(";", PARSER_DELIMITER, NONE, NONE, NodeFlags::IS_PUNCTUATION)
DEF_TYPE(".", PARSER_DELIMITER, NONE, NONE, NodeFlags::IS_PUNCTUATION)

// Arithmetic operators
DEF_TYPE("+", OPERATOR_ARITHMETIC, NONE, NODE_TEXT, 0)
DEF_TYPE("-", OPERATOR_ARITHMETIC, NONE, NODE_TEXT, 0)
DEF_TYPE("*", OPERATOR_ARITHMETIC, NONE, NODE_TEXT, 0)
DEF_TYPE("/", OPERATOR_ARITHMETIC, NONE, NODE_TEXT, 0)
DEF_TYPE("%", OPERATOR_ARITHMETIC, NONE, NODE_TEXT, 0)
DEF_TYPE("**", OPERATOR_ARITHMETIC, NONE, NODE_TEXT, 0)
DEF_TYPE("//", OPERATOR_ARITHMETIC, NONE, NODE_TEXT, 0)
DEF_TYPE("@", OPERATOR_ARITHMETIC, NONE, NODE_TEXT, 0)
DEF_TYPE("&", OPERATOR_ARITHMETIC, NONE, NODE_TEXT, 0)
DEF_TYPE("|", OPERATOR_ARITHMETIC, NONE, NODE_TEXT, 0)
DEF_TYPE("^", OPERATOR_ARITHMETIC, NONE, NODE_TEXT, 0)
DEF_TYPE("~", OPERATOR_ARITHMETIC, NONE, NODE_TEXT, 0)
DEF_TYPE("<<", OPERATOR_ARITHMETIC, NONE, NODE_TEXT, 0)
DEF_TYPE(">>", OPERATOR_ARITHMETIC, NONE, NODE_TEXT, 0)

// Logical operators
DEF_TYPE("and", OPERATOR_LOGICAL, NONE, NODE_TEXT, 0)
DEF_TYPE("or", OPERATOR_LOGICAL, NONE, NODE_TEXT, 0)
DEF_TYPE("not", OPERATOR_LOGICAL, NONE, NODE_TEXT, 0)

// Comparison operators
DEF_TYPE("==", OPERATOR_COMPARISON, NONE, NODE_TEXT, 0)
DEF_TYPE("!=", OPERATOR_COMPARISON, NONE, NODE_TEXT, 0)
DEF_TYPE("<", OPERATOR_COMPARISON, NONE, NODE_TEXT, 0)
DEF_TYPE(">", OPERATOR_COMPARISON, NONE, NODE_TEXT, 0)
DEF_TYPE("<=", OPERATOR_COMPARISON, NONE, NODE_TEXT, 0)
DEF_TYPE(">=", OPERATOR_COMPARISON, NONE, NODE_TEXT, 0)
DEF_TYPE("is", OPERATOR_COMPARISON, NONE, NODE_TEXT, 0)
DEF_TYPE("in", OPERATOR_COMPARISON, NONE, NODE_TEXT, 0)

// Assignment operators
DEF_TYPE("=", OPERATOR_ASSIGNMENT, NONE, NODE_TEXT, 0)
DEF_TYPE("+=", OPERATOR_ASSIGNMENT, NONE, NODE_TEXT, 0)
DEF_TYPE("-=", OPERATOR_ASSIGNMENT, NONE, NODE_TEXT, 0)
DEF_TYPE("*=", OPERATOR_ASSIGNMENT, NONE, NODE_TEXT, 0)
DEF_TYPE("/=", OPERATOR_ASSIGNMENT, NONE, NODE_TEXT, 0)
DEF_TYPE("%=", OPERATOR_ASSIGNMENT, NONE, NODE_TEXT, 0)
DEF_TYPE("**=", OPERATOR_ASSIGNMENT, NONE, NODE_TEXT, 0)
DEF_TYPE("//=", OPERATOR_ASSIGNMENT, NONE, NODE_TEXT, 0)
DEF_TYPE("@=", OPERATOR_ASSIGNMENT, NONE, NODE_TEXT, 0)
DEF_TYPE("&=", OPERATOR_ASSIGNMENT, NONE, NODE_TEXT, 0)
DEF_TYPE("|=", OPERATOR_ASSIGNMENT, NONE, NODE_TEXT, 0)
DEF_TYPE("^=", OPERATOR_ASSIGNMENT, NONE, NODE_TEXT, 0)
DEF_TYPE("<<=", OPERATOR_ASSIGNMENT, NONE, NODE_TEXT, 0)
DEF_TYPE(">>=", OPERATOR_ASSIGNMENT, NONE, NODE_TEXT, 0)
DEF_TYPE(":=", OPERATOR_ASSIGNMENT, NONE, NODE_TEXT, 0)