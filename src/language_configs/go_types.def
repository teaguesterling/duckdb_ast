// Go language node type definitions
// Format: DEF_TYPE(raw_type, semantic_type, name_strategy, value_strategy, flags)

// Package and imports
DEF_TYPE(package_clause, DEFINITION_MODULE, FIND_IDENTIFIER, NONE, 0x01)
DEF_TYPE(package_identifier, NAME_IDENTIFIER, NODE_TEXT, NONE, 0x01)
DEF_TYPE(import_declaration, EXTERNAL_IMPORT, NONE, NODE_TEXT, 0x01)
DEF_TYPE(import_spec, EXTERNAL_IMPORT, NODE_TEXT, NONE, 0x01)

// Function declarations and definitions
DEF_TYPE(function_declaration, DEFINITION_FUNCTION, FIND_IDENTIFIER, NONE, 0x01)
DEF_TYPE(method_declaration, DEFINITION_FUNCTION, FIND_IDENTIFIER, NONE, 0x01)
DEF_TYPE(func_literal, DEFINITION_FUNCTION, NONE, NONE, 0)

// Type declarations
DEF_TYPE(type_declaration, EXECUTION_DECLARATION, FIND_IDENTIFIER, NONE, 0x01)
DEF_TYPE(type_spec, EXECUTION_DECLARATION, FIND_IDENTIFIER, NONE, 0x01)
DEF_TYPE(struct_type, DEFINITION_CLASS, NONE, NONE, 0x01)
DEF_TYPE(interface_type, DEFINITION_CLASS, NONE, NONE, 0x01)

// Variable declarations
DEF_TYPE(var_declaration, DEFINITION_VARIABLE, FIND_IDENTIFIER, NONE, 0x01)
DEF_TYPE(var_spec, DEFINITION_VARIABLE, FIND_IDENTIFIER, NONE, 0x01)
DEF_TYPE(const_declaration, DEFINITION_VARIABLE, FIND_IDENTIFIER, NONE, 0x01)
DEF_TYPE(const_spec, DEFINITION_VARIABLE, FIND_IDENTIFIER, NONE, 0x01)
DEF_TYPE(short_var_declaration, DEFINITION_VARIABLE, FIND_IDENTIFIER, NONE, 0x01)

// Expressions and references
DEF_TYPE(call_expression, COMPUTATION_CALL, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE(selector_expression, COMPUTATION_ACCESS, FIND_PROPERTY, NONE, 0)
DEF_TYPE(index_expression, COMPUTATION_ACCESS, NONE, NONE, 0)
DEF_TYPE(slice_expression, COMPUTATION_ACCESS, NONE, NONE, 0)

// Identifiers and literals
DEF_TYPE(identifier, NAME_IDENTIFIER, NODE_TEXT, NONE, 0)
DEF_TYPE(field_identifier, NAME_IDENTIFIER, NODE_TEXT, NONE, 0)
DEF_TYPE(type_identifier, TYPE_REFERENCE, NODE_TEXT, NONE, 0)

// Literals
DEF_TYPE(int_literal, LITERAL_NUMBER, NONE, NODE_TEXT, 0)
DEF_TYPE(float_literal, LITERAL_NUMBER, NONE, NODE_TEXT, 0)
DEF_TYPE(imaginary_literal, LITERAL_NUMBER, NONE, NODE_TEXT, 0)
DEF_TYPE(rune_literal, LITERAL_STRING, NONE, NODE_TEXT, 0)
DEF_TYPE(raw_string_literal, LITERAL_STRING, NONE, NODE_TEXT, 0)
DEF_TYPE(interpreted_string_literal, LITERAL_STRING, NONE, NODE_TEXT, 0)

// Control flow
DEF_TYPE(if_statement, FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE(for_statement, FLOW_LOOP, NONE, NONE, 0)
DEF_TYPE(range_clause, FLOW_LOOP, NONE, NONE, 0)
DEF_TYPE(switch_statement, FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE(type_switch_statement, FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE(select_statement, FLOW_CONDITIONAL, NONE, NONE, 0)

// Go-specific constructs
DEF_TYPE(go_statement, FLOW_SYNC, NONE, NONE, 0)
DEF_TYPE(defer_statement, FLOW_SYNC, NONE, NONE, 0)
DEF_TYPE(channel_type, TYPE_COMPOSITE, NONE, NONE, 0)
DEF_TYPE(receive_statement, EXECUTION_STATEMENT, NONE, NONE, 0)
DEF_TYPE(send_statement, EXECUTION_STATEMENT, NONE, NONE, 0)

// Comments (mark as syntax to filter out by default)
DEF_TYPE(comment, METADATA_COMMENT, NONE, NODE_TEXT, 0x08)
DEF_TYPE(line_comment, METADATA_COMMENT, NONE, NODE_TEXT, 0x08)
DEF_TYPE(block_comment, METADATA_COMMENT, NONE, NODE_TEXT, 0x08)