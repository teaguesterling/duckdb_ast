#!/bin/bash

# AST Navigator with Parquet Indexing - High-performance semantic code navigation
# Usage: ./ast-nav-indexed <command> [args...]

DUCKDB="./build/release/duckdb"
SQL_BASE="ast-navigator.sql"
SQL_PARQUET="ast-nav-parquet.sql"

# Check if DuckDB exists
if [[ ! -f "$DUCKDB" ]]; then
    echo "Error: DuckDB not found at $DUCKDB"
    echo "Run 'make' to build the extension first"
    exit 1
fi

# Check if SQL libraries exist
if [[ ! -f "$SQL_BASE" ]] || [[ ! -f "$SQL_PARQUET" ]]; then
    echo "Error: SQL libraries not found"
    echo "Required: $SQL_BASE and $SQL_PARQUET"
    exit 1
fi

# Function to execute SQL query with both SQL files loaded
run_query() {
    local query="$1"
    $DUCKDB -s ".read $SQL_BASE" -s ".read $SQL_PARQUET" -column -s "$query"
}

# Function to execute SQL statement (for COPY commands)
run_statement() {
    local statement="$1"
    $DUCKDB -s ".read $SQL_BASE" -s ".read $SQL_PARQUET" -s "$statement"
}

# Parse command and arguments
case "${1:-help}" in
    "index"|"create-index")
        # Create an index: ast-nav-indexed index "src/**/*.cpp" [file_type]
        if [[ -z "$2" ]]; then
            echo "Usage: ast-nav-indexed index <file_pattern> [file_type]"
            echo "Example: ast-nav-indexed index 'src/**/*.cpp' cpp"
            exit 1
        fi
        
        file_pattern="$2"
        file_type="${3:-}"
        
        # Get the COPY statement from the macro
        copy_stmt=$(run_query "SELECT ast_create_index_exec('$file_pattern', $([ -n "$file_type" ] && echo "'$file_type'" || echo "NULL"));" | tail -n 1)
        
        echo "Creating index for pattern: $file_pattern"
        run_statement "$copy_stmt"
        
        # Show statistics
        index_file=".index-${file_type:-$(echo "$file_pattern" | grep -o '\.[^.]*$' | tr -d '.')}.parquet"
        run_query "SELECT * FROM ast_index_stats('$index_file');"
        ;;
        
    "update-index")
        # Update an existing index with new files
        if [[ -z "$2" ]]; then
            echo "Usage: ast-nav-indexed update-index <file_pattern> [file_type]"
            echo "Example: ast-nav-indexed update-index 'src/**/*.cpp' cpp"
            exit 1
        fi
        
        file_pattern="$2"
        file_type="${3:-}"
        
        # Show what would be updated
        run_query "SELECT * FROM ast_update_index('$file_pattern', $([ -n "$file_type" ] && echo "'$file_type'" || echo "NULL"));"
        
        # Generate update SQL
        echo ""
        echo "To update the index, run:"
        run_query "SELECT ast_generate_update_sql('$file_pattern', $([ -n "$file_type" ] && echo "'$file_type'" || echo "NULL"));" | tail -n +3
        ;;
        
    "list-indexes"|"indexes")
        # List all available indexes
        run_query "SELECT * FROM ast_list_indexes();"
        ;;
        
    "stats")
        # Show index statistics
        index_path="${2:-.index-*.parquet}"
        run_query "SELECT * FROM ast_index_stats('$index_path');"
        ;;
        
    "file-functions"|"ff")
        # Get all functions in a specific file using index
        if [[ -z "$2" ]]; then
            echo "Usage: ast-nav-indexed file-functions <file_path> [index_path]"
            echo "Example: ast-nav-indexed file-functions 'src/main.cpp'"
            exit 1
        fi
        
        file_path="$2"
        index_path="${3:-}"
        
        if [[ -n "$index_path" ]]; then
            run_query "SELECT * FROM ast_file_functions('$file_path', '$index_path');"
        else
            run_query "SELECT * FROM ast_file_functions('$file_path');"
        fi
        ;;
        
    "find-function"|"ff-detail")
        # Find a function with detailed analysis
        if [[ -z "$2" ]]; then
            echo "Usage: ast-nav-indexed find-function <function_name> [file_pattern] [index_path]"
            echo "Example: ast-nav-indexed find-function 'ParseToASTResult'"
            exit 1
        fi
        
        function_name="$2"
        file_pattern="${3:-%}"
        index_path="${4:-}"
        
        if [[ -n "$index_path" ]]; then
            run_query "SELECT * FROM ast_find_function_detail('$function_name', '$index_path', '$file_pattern');"
        else
            run_query "SELECT * FROM ast_find_function_detail('$function_name', NULL, '$file_pattern');"
        fi
        ;;
        
    "function-source"|"fs")
        # Get function source location
        if [[ -z "$2" ]]; then
            echo "Usage: ast-nav-indexed function-source <function_name> [file_path] [index_path]"
            echo "Example: ast-nav-indexed function-source 'main'"
            exit 1
        fi
        
        function_name="$2"
        file_path="${3:-}"
        index_path="${4:-}"
        
        # Get the source location
        result=$(run_query "SELECT * FROM ast_get_function_source('$function_name', $([ -n "$file_path" ] && echo "'$file_path'" || echo "NULL"), $([ -n "$index_path" ] && echo "'$index_path'" || echo "NULL"));" | tail -n +3)
        
        if [[ -z "$result" ]]; then
            echo "Function '$function_name' not found"
            exit 1
        fi
        
        # Extract and show the source
        extract_cmd=$(echo "$result" | awk -F'|' '{gsub(/^ *| *$/, "", $5); print $5}' | head -n 1)
        eval "$extract_cmd"
        ;;
        
    "complex")
        # Find complex functions using index
        index_path="${2:-.index-*.parquet}"
        min_complexity="${3:-100}"
        
        run_query "SELECT * FROM ast_index_complex_functions('$index_path', $min_complexity);"
        ;;
        
    "search"|"find")
        # Quick search across all indexes
        if [[ -z "$2" ]]; then
            echo "Usage: ast-nav-indexed search <search_term> [type]"
            echo "Types: function, class, variable"
            echo "Example: ast-nav-indexed search 'Parse' function"
            exit 1
        fi
        
        search_term="$2"
        search_type="${3:-function}"
        
        run_query "SELECT * FROM ast_quick_find('$search_term', '$search_type');"
        ;;
        
    "extract"|"source")
        # Extract source code for a file region
        if [[ -z "$2" ]]; then
            echo "Usage: ast-nav-indexed extract <file_path> [start_line] [end_line]"
            echo "Example: ast-nav-indexed extract 'src/main.cpp' 100 150"
            exit 1
        fi
        
        file_path="$2"
        start_line="${3:-1}"
        end_line="${4:-}"
        
        if [[ -f "$file_path" ]]; then
            if [[ -n "$end_line" ]]; then
                sed -n "${start_line},${end_line}p" "$file_path"
            else
                sed -n "${start_line},\$p" "$file_path"
            fi
        else
            echo "File not found: $file_path"
            exit 1
        fi
        ;;
        
    "query"|"sql")
        # Execute custom SQL
        if [[ -z "$2" ]]; then
            echo "Usage: ast-nav-indexed query '<SQL_query>'"
            exit 1
        fi
        run_query "$2"
        ;;
        
    "help"|"-h"|"--help")
        cat << 'EOF'
AST Navigator with Parquet Indexing - High-Performance Code Navigation

INDEX MANAGEMENT:
  index <pattern> [type]         Create parquet index for files
  update-index <pattern> [type]  Show update plan for index
  list-indexes                   List all available indexes
  stats [index_path]            Show index statistics

INDEXED QUERIES:
  file-functions <file> [index]  Get all functions in a file
  find-function <name> [pattern] Find function with analysis
  function-source <name> [file]  Get function source location
  complex [index] [min]         Find complex functions
  search <term> [type]          Quick search across indexes

UTILITIES:
  extract <file> [start] [end]  Extract source code lines
  query '<SQL>'                 Execute custom SQL query

EXAMPLES:
  # Create an index for C++ files
  ast-nav-indexed index 'src/**/*.cpp' cpp
  
  # Find all functions in a file using the index
  ast-nav-indexed file-functions 'src/main.cpp'
  
  # Find a specific function with analysis
  ast-nav-indexed find-function 'ParseToASTResult'
  
  # Extract function source code
  ast-nav-indexed function-source 'main'
  
  # Search for functions containing 'parse'
  ast-nav-indexed search 'parse' function
  
  # Find complex functions (>100 nodes)
  ast-nav-indexed complex .index-cpp.parquet 100

INDEX FILES:
  Indexes are stored as .index-<type>.parquet files
  Use ZSTD compression level 22 for optimal size
  Typical compression: 25M nodes â†’ 40MB parquet file
EOF
        exit 0
        ;;
        
    *)
        echo "Unknown command: $1"
        echo "Run 'ast-nav-indexed help' for usage information"
        exit 1
        ;;
esac