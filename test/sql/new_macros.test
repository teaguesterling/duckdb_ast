# name: test/sql/new_macros.test
# description: Test new AST struct macros
# group: [ast_struct]

require duckdb_ast

# Load the new macro files
statement ok
SELECT duckdb_ast_load_embedded_sql('08_ast_struct_core.sql');

statement ok
SELECT duckdb_ast_load_embedded_sql('09_ast_struct_advanced.sql');

statement ok
SELECT duckdb_ast_load_embedded_sql('10_ast_struct_entrypoint.sql');

# Test basic entrypoint macro
query II
SELECT file, lang FROM ast('test/data/javascript/simple.js');
----
test/data/javascript/simple.js	javascript

# Test ast_query interface
query I
SELECT count(*) FROM ast_query('test/data/javascript/simple.js') WHERE type = 'function_declaration';
----
3

# Test ast_functions shortcut
query I
SELECT count(*) FROM ast_functions('test/data/javascript/simple.js');
----
3

# Test ast_classes shortcut  
query I
SELECT count(*) FROM ast_classes('test/data/javascript/simple.js');
----
1

# Test ast_overview
query I
SELECT functions > 0 AND classes > 0 FROM ast_overview('test/data/javascript/simple.js');
----
true

# Test core macro: ast_load
statement ok
CREATE TABLE test_ast AS SELECT ast_load('test/data/javascript/simple.js') as ast_data;

# Test core macro: ast_nodes
query I
SELECT count(*) FROM ast_nodes((SELECT ast_data FROM test_ast));
----
141

# Test core macro: ast_type
query I
SELECT count(*) FROM ast_type((SELECT ast_data FROM test_ast), 'function_declaration');
----
3

# Test core macro: ast_named (nodes with names)
query I
SELECT count(*) > 0 FROM ast_named((SELECT ast_data FROM test_ast));
----
true

# Test navigation: ast_children
query I
SELECT count(*) FROM ast_children((SELECT ast_data FROM test_ast), 0);
----
1

# Test advanced macro: ast_function_complexity
query I
SELECT count(*) FROM ast_function_complexity((SELECT ast_data FROM test_ast));
----
3

# Test language-specific helper: ast_js_functions  
query I
SELECT count(*) FROM ast_js_functions((SELECT ast_data FROM test_ast));
----
4

# Test language-specific helper: ast_js_classes
query I
SELECT count(*) FROM ast_js_classes((SELECT ast_data FROM test_ast));
----
1

# Test with Python file
statement ok
CREATE TABLE test_py_ast AS SELECT ast_load('test/data/python/simple.py', 'python') as ast_data;

# Test Python-specific helpers
query I
SELECT count(*) > 0 FROM ast_py_functions((SELECT ast_data FROM test_py_ast));
----
true

# Test ast_identifiers
query I
SELECT count(*) > 0 FROM ast_identifiers('test/data/javascript/simple.js');
----
true

# Test that ast_overview provides comprehensive info
query I
SELECT total_nodes > 0 AND functions > 0 AND max_depth > 0 
FROM ast_overview('test/data/javascript/simple.js');
----
true

# Test ast_query flexibility - can filter by any field
query I
SELECT count(*) FROM ast_query('test/data/javascript/simple.js') 
WHERE depth = 2 AND type = 'class_declaration';
----
1

# Test ast_query with line number filtering
query I
SELECT count(*) FROM ast_query('test/data/javascript/simple.js') 
WHERE line BETWEEN 7 AND 20;
----
41

# Test subtree extraction with O(1) performance
query I
SELECT count(*) > 0 FROM (
    WITH class_id AS (
        SELECT id FROM ast_query('test/data/javascript/simple.js') 
        WHERE type = 'class_declaration' LIMIT 1
    )
    SELECT * FROM ast_subtree((SELECT ast_data FROM test_ast), (SELECT id FROM class_id))
);
----
true

# Test that new macros work with complex queries
query I
SELECT 
    function_name, 
    complexity > 0 as has_complexity
FROM ast_functions('test/data/javascript/simple.js')
WHERE function_name IS NOT NULL
LIMIT 1;
----
hello	true

# Clean up
statement ok
DROP TABLE test_ast;

statement ok
DROP TABLE test_py_ast;