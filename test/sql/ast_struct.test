# name: test/sql/ast_struct.test
# description: Test AST struct functionality and new read_ast function
# group: [ast_struct]

require duckdb_ast

# Test basic read_ast function - single argument with language detection
statement ok
CREATE TABLE test_js_struct AS 
SELECT ast FROM read_ast('test/data/javascript/simple.js');

# Verify the structure contains expected metadata fields
query I
SELECT 
    ast.file_path,
    ast.language,
    length(ast.nodes) as node_count
FROM test_js_struct;
----
test/data/javascript/simple.js	javascript	11

# Test accessing individual node fields from the struct
query III
SELECT 
    ast.nodes[1].node_id,
    ast.nodes[1].type,
    ast.nodes[1].children_count
FROM test_js_struct;
----
0	program	1

# Test that descendant_count is calculated correctly for root node
query I
SELECT ast.nodes[1].descendant_count FROM test_js_struct;
----
10

# Test read_ast with explicit language parameter
statement ok
CREATE TABLE test_py_struct AS 
SELECT ast FROM read_ast('test/data/python/simple.py', 'python');

query I
SELECT ast.language FROM test_py_struct;
----
python

# Test that children_count and descendant_count fields exist and are non-negative
query I
SELECT count(*) FROM (
    SELECT unnest(ast.nodes) as node 
    FROM test_js_struct
) WHERE node.children_count >= 0 AND node.descendant_count >= 0;
----
11

# Test O(1) subtree extraction using descendant_count
# Get a function node and all its descendants
query I
SELECT count(*) FROM (
    WITH function_nodes AS (
        SELECT node.node_id, node.descendant_count
        FROM (SELECT unnest(ast.nodes) as node FROM test_js_struct)
        WHERE node.type = 'function_declaration'
        LIMIT 1
    ),
    all_nodes AS (
        SELECT node.node_id, row_number() OVER (ORDER BY node.node_id) - 1 as position
        FROM (SELECT unnest(ast.nodes) as node FROM test_js_struct)
    )
    SELECT *
    FROM all_nodes a
    JOIN function_nodes f ON a.position BETWEEN 
        (SELECT position FROM all_nodes WHERE node_id = f.node_id) AND 
        (SELECT position FROM all_nodes WHERE node_id = f.node_id) + f.descendant_count
);
----
6

# Test backward compatibility - ensure read_ast_objects still works
statement ok
CREATE TABLE test_objects_compat AS 
SELECT * FROM read_ast_objects('test/data/javascript/simple.js');

# Verify both functions return same node count
query I
SELECT 
    (SELECT length(ast.nodes) FROM test_js_struct) = 
    (SELECT count(*) FROM test_objects_compat)
----
true

# Test node field consistency between struct and objects versions
query I
SELECT count(*) FROM (
    WITH struct_nodes AS (
        SELECT 
            node.node_id, 
            node.type, 
            node.children_count,
            node.descendant_count
        FROM (SELECT unnest(ast.nodes) as node FROM test_js_struct)
    ),
    object_nodes AS (
        SELECT node_id, type, children_count, descendant_count 
        FROM test_objects_compat
    )
    SELECT s.*
    FROM struct_nodes s
    JOIN object_nodes o ON s.node_id = o.node_id 
    WHERE s.type = o.type 
      AND s.children_count = o.children_count
      AND s.descendant_count = o.descendant_count
);
----
11

# Test error handling for non-existent file
statement error
SELECT * FROM read_ast('nonexistent.js');
----
File not found

# Test error handling for undetectable language
statement error
SELECT * FROM read_ast('test/data/unknown.xyz');
----
Could not detect language from file extension

# Clean up
statement ok
DROP TABLE test_js_struct;

statement ok
DROP TABLE test_py_struct;

statement ok
DROP TABLE test_objects_compat;