# name: test/sql/ast_objects/json_table_functions.test
# description: Test json_each and json_tree with AST objects
# group: [duckdb_ast]

require duckdb_ast

require json

# Test 1: Use json_each to iterate over all nodes
query II
SELECT COUNT(*) as node_count, COUNT(DISTINCT json_extract_string(je.value, '$.type')) as unique_types
FROM read_ast_objects('test/data/python/simple.py', 'python') AS ast,
     json_each(ast.nodes) AS je;
----
110	32

# Test 2: Find all function definitions using json_each
query I
SELECT json_extract_string(je.value, '$.name') as function_name
FROM read_ast_objects('test/data/python/simple.py', 'python') AS ast,
     json_each(ast.nodes) AS je
WHERE json_extract_string(je.value, '$.type') = 'function_definition'
ORDER BY function_name;
----
__init__
add
hello
main

# Test 3: Get node types and their counts
query II
SELECT json_extract_string(je.value, '$.type') as node_type, COUNT(*) as count
FROM read_ast_objects('test/data/python/simple.py', 'python') AS ast,
     json_each(ast.nodes) AS je
GROUP BY node_type
HAVING count > 5
ORDER BY count DESC, node_type;
----
identifier	19
(	8
)	8
expression_statement	7
:	6
block	6

# Test 4: Find nodes at specific positions using key
query II
SELECT je.key::INTEGER as position, json_extract_string(je.value, '$.type') as node_type
FROM read_ast_objects('test/data/python/simple.py', 'python') AS ast,
     json_each(ast.nodes) AS je
WHERE je.key::INTEGER < 5
ORDER BY position;
----
0	module
1	function_definition
2	def
3	identifier
4	parameters

# Test 5: Use json_tree to explore nested structure of a single node
query III
SELECT jt.key, json_extract_string(jt.value, '$.type') as type, jt.type as json_type
FROM read_ast_objects('test/data/python/simple.py', 'python') AS ast,
     json_tree(json_extract(ast.nodes, '$[1]')) AS jt
WHERE jt.type != 'ARRAY' AND jt.type != 'OBJECT' AND jt.key IS NOT NULL
ORDER BY jt.id
LIMIT 5;
----
id	NULL	UBIGINT
type	NULL	VARCHAR
name	NULL	VARCHAR
line	NULL	UBIGINT
column	NULL	UBIGINT

# Test 6: Find unique identifier names using json_each
query I
SELECT DISTINCT json_extract_string(je.value, '$.name') as identifier_name
FROM read_ast_objects('test/data/python/simple.py', 'python') AS ast,
     json_each(ast.nodes) AS je
WHERE json_extract_string(je.value, '$.type') = 'identifier'
   AND json_extract_string(je.value, '$.name') IS NOT NULL
ORDER BY identifier_name
LIMIT 7;
----
MyClass
__init__
__name__
add
hello
main
obj