# name: test/sql/ast_objects/comprehensive_chain_tests.test
# description: Comprehensive test suite for all AST macros - entrypoint chain style
# group: [duckdb_ast]

require duckdb_ast

require json

# Test 1: Basic Entrypoint Functionality
# ======================================

# ast() normalization with different input types
query IIII
SELECT 
    json_array_length(ast(nodes)) as from_json,
    json_array_length(ast('[]'::JSON)) as from_string,
    json_array_length(ast(NULL)) as from_null,
    json_array_length(ast('[{"type": "test"}]'::JSON)) as from_object
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
110	0	0	1

# Test 2: Core Finding Functions - Chain Style
# ============================================

# find_type - single type
query I
SELECT ast(nodes).find_type('function_definition').count_elements()
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
4

# find_type - multiple types
query I
SELECT ast(nodes).find_type(['function_definition', 'class_definition']).count_elements()
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
5

# find_type - nonexistent type
query I
SELECT ast(nodes).find_type('nonexistent_type').count_elements()
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
0

# Test 3: Name Extraction - Chain Style
# =====================================

# function_names
query I
SELECT ast(nodes).function_names().count_elements()
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
4

# class_names
query I
SELECT ast(nodes).class_names().count_elements()
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
1

# identifiers
query I
SELECT ast(nodes).identifiers().count_elements()
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
19

# strings
query I
SELECT ast(nodes).strings().count_elements()
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
0

# Test 4: Depth and Hierarchy - Chain Style
# ==========================================

# at_depth - single depth
query I
SELECT ast(nodes).at_depth(1).count_elements()
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
4

# at_depth - multiple depths
query I
SELECT ast(nodes).at_depth([1, 2]).count_elements()
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
22

# children_of - root node children
query I
SELECT ast(nodes).children_of(0).count_elements()
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
4

# Test 5: Analysis Functions - Chain Style
# ========================================

# type_counts
query I
SELECT json_extract_string(ast(nodes).type_counts(), '$.function_definition') IS NOT NULL
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
true

# summary
query III
SELECT 
    json_extract(ast(nodes).summary(), '$.total_nodes'),
    json_extract(ast(nodes).summary(), '$.function_count'),
    json_extract(ast(nodes).summary(), '$.max_depth')
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
110	4	8

# function_details
query I
SELECT ast(nodes).function_details().count_elements()
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
4

# Test 6: Advanced Chaining Operations
# ====================================

# Multi-step chaining
query I
SELECT ast(nodes).find_type('function_definition').extract_names().count_elements()
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
4

# Chain with filtering
query I
SELECT ast(nodes).where_depth(1).count_elements()
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
4

# Chain with type filtering
query I
SELECT ast(nodes).where_type('function_definition').count_elements()
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
4

# Complex chaining
query I
SELECT ast(nodes).where_depth(1).where_type('function_definition').extract_names().count_elements()
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
2

# Test 7: Array Utility Functions
# ===============================

# count_elements with various inputs
query IIII
SELECT 
    ast(nodes).find_type('function_definition').count_elements() as functions,
    ast(nodes).find_type('class_definition').count_elements() as classes,
    ast(nodes).find_type('nonexistent').count_elements() as none,
    ast(NULL).count_elements() as null_input
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
4	1	0	0

# first_element and last_element
query II
SELECT 
    ast(nodes).find_type('function_definition').first_element() IS NOT NULL as has_first,
    ast(nodes).find_type('function_definition').last_element() IS NOT NULL as has_last
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
true	true

# extract_names from different node types
query II
SELECT 
    ast(nodes).find_type('function_definition').extract_names().count_elements() as func_names,
    ast(nodes).find_type('class_definition').extract_names().count_elements() as class_names
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
4	1

# Test 8: Equivalence Between Styles
# ==================================

# Verify functional and chain styles produce same results
query IIII
SELECT 
    ast_find_type(nodes, 'function_definition') = ast(nodes).find_type('function_definition') as find_equiv,
    ast_function_names(nodes) = ast(nodes).function_names() as names_equiv,
    ast_summary(nodes) = ast(nodes).summary() as summary_equiv,
    ast_at_depth(nodes, 1) = ast(nodes).at_depth(1) as depth_equiv
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
true	true	true	true

# Test 9: Working with Individual Nodes
# =====================================

# Process each function node individually
query I
SELECT COUNT(*)
FROM read_ast_objects('test/data/python/simple.py', 'python') AS ast_result,
     json_each(ast(ast_result.nodes).find_type('function_definition')) AS func_node
WHERE json_extract_string(func_node.value, '$.name') IS NOT NULL;
----
4

# Extract information from individual nodes
query I
SELECT COUNT(*)
FROM read_ast_objects('test/data/python/simple.py', 'python') AS ast_result,
     json_each(ast_result.nodes) AS node
WHERE json_extract_string(node.value, '$.type') = 'function_definition'
  AND ast(node.value).extract_names().count_elements() = 1;
----
4

# Test 10: Complex Real-World Scenarios
# =====================================

# Analyze code structure comprehensively
query IIIII
SELECT 
    ast(nodes).find_type('function_definition').count_elements() as functions,
    ast(nodes).find_type('class_definition').count_elements() as classes,
    ast(nodes).where_depth(1).count_elements() as top_level,
    ast(nodes).identifiers().count_elements() as identifiers,
    json_extract(ast(nodes).summary(), '$.max_depth') as max_depth
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
4	1	4	19	8

# Find deeply nested function definitions at depth 3
query I
SELECT ast(nodes).where_depth(3).where_type('function_definition').count_elements()
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
2

# Test 11: Error Handling and Edge Cases
# ======================================

# Empty arrays
query III
SELECT 
    ast('[]').count_elements() as empty_json,
    ast(NULL).find_type('any').count_elements() as null_input,
    ast('{}').count_elements() as single_object
----
0	0	1

# Invalid operations
query I
SELECT ast(nodes).find_type('').count_elements()
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
0

# Test 12: Performance with Large Operations
# ==========================================

# Multiple chained operations
query I
SELECT ast(nodes)
    .where_depth(2)
    .where_type('identifier')
    .extract_names()
    .count_elements()
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
0

# Complex filtering and extraction
query I
SELECT ast(nodes)
    .find_type(['function_definition', 'class_definition', 'identifier'])
    .count_elements()
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
24

# Test 13: Struct Input Handling
# ==============================

# Create a struct with nodes field
statement ok
CREATE TABLE test_ast_struct AS 
SELECT {'nodes': nodes, 'metadata': {'file': 'test.py', 'language': 'python'}} as ast_data
FROM read_ast_objects('test/data/python/simple.py', 'python');

# Test ast() with struct input
query I
SELECT ast(ast_data).function_names().count_elements()
FROM test_ast_struct;
----
4

# Test chaining with struct input
query II
SELECT 
    ast(ast_data).find_type('function_definition').count_elements() as functions,
    ast(ast_data).find_type('class_definition').count_elements() as classes
FROM test_ast_struct;
----
4	1

# Test 14: Method Chaining Combinations
# =====================================

# Every possible combination of our main methods
query IIIIII
SELECT 
    ast(nodes).find_type('function_definition').extract_names().count_elements() as func_name_count,
    ast(nodes).at_depth(1).where_type('function_definition').count_elements() as top_funcs,
    ast(nodes).children_of(0).where_type('function_definition').count_elements() as root_funcs,
    ast(nodes).where_depth([1,2]).extract_names().count_elements() as shallow_names,
    ast(nodes).find_type(['function_definition', 'class_definition']).extract_names().count_elements() as all_names,
    ast(nodes).function_details().count_elements() as func_details
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
4	2	2	3	5	4