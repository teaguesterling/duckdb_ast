# name: test/sql/ast_objects/json_output.test
# description: Test JSON-based AST objects functionality
# group: [duckdb_ast]

require duckdb_ast

require json

# Test 1: Basic functionality - returns one row per file
query I
SELECT COUNT(*) FROM read_ast_objects('test/data/python/simple.py', 'python');
----
1

# Test 2: Check structured metadata columns
query IIII
SELECT 
    file_path = 'test/data/python/simple.py' as correct_path,
    language = 'python' as correct_language,
    node_count > 0 as has_nodes,
    max_depth > 0 as has_depth
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
true	true	true	true

# Test 3: JSON nodes column contains valid JSON array
query I
SELECT json_valid(nodes) FROM read_ast_objects('test/data/python/simple.py', 'python');
----
true

# Test 4: JSON array is non-empty
query I
SELECT json_array_length(nodes) > 0 FROM read_ast_objects('test/data/python/simple.py', 'python');
----
true

# Test 5: Node count matches JSON array length
query I
SELECT node_count = json_array_length(nodes) as counts_match
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
true

# Test 6: Can extract first node type from JSON
query I
SELECT json_extract_string(nodes, '$[0].type') = 'module' as has_module_root
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
true

# Test 7: Check that JSON contains function_definition text
query I
SELECT nodes LIKE '%function_definition%' as has_functions
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
true