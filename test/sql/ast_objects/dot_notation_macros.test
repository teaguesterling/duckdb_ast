# name: test/sql/ast_objects/dot_notation_macros.test
# description: Test dot notation with macros using parentheses
# group: [duckdb_ast]

require duckdb_ast

require json

# Test 1: Basic dot notation with parentheses works for macros
query I
SELECT json_array_length((nodes).ast_find_type('function_definition')) as count
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
4

# Test 2: Without parentheses, it fails
statement error
SELECT json_array_length(nodes.ast_find_type('function_definition')) as count
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
Binder Error

# Test 3: Chaining with struct-returning macros
statement ok
CREATE OR REPLACE MACRO node_summary(n) AS {
    'type': json_extract_string(n, '$.type'),
    'has_name': json_extract_string(n, '$.name') IS NOT NULL,
    'depth': json_extract(n, '$.depth')::INTEGER
};

query III
SELECT 
    (je.value).node_summary().type as node_type,
    (je.value).node_summary().has_name as has_name,
    (je.value).node_summary().depth as depth
FROM read_ast_objects('test/data/python/simple.py', 'python') AS ast,
     json_each(ast.nodes) AS je
WHERE (je.value).node_summary().type = 'function_definition'
ORDER BY (je.value).node_summary().depth
LIMIT 2;
----
function_definition	true	1
function_definition	true	1

# Test 4: Multiple parentheses levels
query I
SELECT ((nodes).ast_function_names())::VARCHAR as functions
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
["hello","__init__","add","main"]

# Test 5: Complex chaining example
statement ok
CREATE OR REPLACE MACRO ast_analysis(nodes) AS {
    'functions': (nodes).ast_find_type('function_definition'),
    'classes': (nodes).ast_find_type('class_definition'),
    'identifiers': (nodes).ast_identifiers(),
    'summary': (nodes).ast_summary()
};

query II
SELECT 
    json_array_length(((nodes).ast_analysis()).functions) as func_count,
    json_array_length(((nodes).ast_analysis()).classes) as class_count
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
4	1

# Test 6: Accessing nested fields
query I
SELECT json_extract(((nodes).ast_analysis()).summary, '$.max_depth') as max_depth
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
8