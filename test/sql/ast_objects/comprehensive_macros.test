# name: test/sql/ast_objects/comprehensive_macros.test
# description: Comprehensive tests for SQL macros with json_each
# group: [duckdb_ast]

require duckdb_ast

require json

# Macros are now auto-loaded by the extension

# Test 1: Basic function names extraction
query I
SELECT ast_function_names(nodes)::VARCHAR as functions
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
["hello","__init__","add","main"]

# Test 2: Class names extraction
query I
SELECT json_array_length(ast_class_names(nodes)) as class_count
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
1

# Test 3: Node type counting
query I
SELECT json_extract_string(ast_type_counts(nodes), '$.function_definition') IS NOT NULL as has_functions
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
true

# Test 4: Find specific node types
query I
SELECT json_array_length(ast_find_type(nodes, 'function_definition')) as function_node_count
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
4

# Test 5: Nodes at specific depth
query I
SELECT json_array_length(ast_at_depth(nodes, 1)) > 0 as has_depth_1_nodes
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
true

# Test 6: Extract identifiers
query I
SELECT json_array_length(ast_identifiers(nodes)) > 0 as has_identifiers
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
true

# Test 7: Chained operations
query II
SELECT 
    json_array_length(ast_function_names(nodes)) as func_count,
    json_array_length(ast_class_names(nodes)) as class_count
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
4	1

# Test 8: Complex query with multiple macros
query I
SELECT 
    json_extract_string(ast_type_counts(nodes), '$.function_definition')::INTEGER = 
    json_array_length(ast_function_names(nodes)) as counts_match
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
true

# Test 9: Empty results for non-existent types
query I
SELECT json_array_length(ast_find_type(nodes, 'nonexistent_type')) as empty_result
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
0

# Test 10: Macro with parameters works correctly
query I
SELECT json_array_length(nodes.ast_at_depth(0)) as root_nodes
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
1