# name: test/sql/ast_objects/ai_agent_scenarios.test
# description: Real-world scenarios that AI agents would commonly need
# group: [duckdb_ast]

require duckdb_ast

require json

# Create realistic macros for AI agent use cases
statement ok
CREATE OR REPLACE MACRO ast_get_names(nodes, node_type:='function_definition') AS (
    (SELECT json_group_array(json_extract_string(je.value, '$.name'))
     FROM json_each(nodes) AS je
     WHERE json_extract_string(je.value, '$.type') = 'function_definition')
);

statement ok
CREATE OR REPLACE MACRO ast_find_calls(nodes, function_name) AS (
    (SELECT json_group_array(je.value)
     FROM json_each(nodes) AS je
     WHERE json_extract_string(je.value, '$.type') = 'call'
       AND json_extract_string(je.value, '$.name') = function_name)
);

statement ok
CREATE OR REPLACE MACRO ast_complexity_score(nodes) AS (
    json_array_length(nodes) / 10.0 + 
    (SELECT COUNT(*) FROM json_each(nodes) AS je WHERE json_extract_string(je.value, '$.type') = 'function_definition') * 2.0
);

# Scenario 1: Find all functions in a codebase
query I
SELECT nodes.ast_get_names(nodes, node_type:='function_definition')::VARCHAR as all_functions
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
["hello","__init__","add","main"]

# Scenario 2: Check if a specific function exists
query I
SELECT nodes.ast_get_names(nodes, node_type:='function_definition')::VARCHAR LIKE '%main%' as has_main_function
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
true

# Scenario 3: Count lines of code (estimate from node count)
query I
SELECT ROUND(nodes.ast_complexity_score(), 1) as complexity_score
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
19.0

# Scenario 4: Find entry points (main function or if __name__ == '__main__')
query I
SELECT 
    CASE 
        WHEN nodes.ast_get_names(nodes, node_type:='function_definition')::VARCHAR LIKE '%main%' THEN 'Has main function'
        ELSE 'No clear entry point'
    END as entry_point_analysis
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
Has main function

# Scenario 5: Identify file type/purpose based on structure
query I
SELECT 
    CASE 
        WHEN func_count >= 3 AND class_count >= 1 THEN 'Module with classes'
        WHEN func_count >= 2 THEN 'Function library'
        WHEN class_count >= 1 THEN 'Class definition'
        ELSE 'Script'
    END as file_type
FROM (
    SELECT 
        json_array_length(nodes.ast_get_names(nodes, node_type:='function_definition')) as func_count,
        (SELECT COUNT(*) FROM json_each(nodes) AS je WHERE json_extract_string(je.value, '$.type') = 'class_definition') as class_count
    FROM read_ast_objects('test/data/python/simple.py', 'python')
);
----
Module with classes

# Scenario 6: Find potential code smells (very long functions)
query I
SELECT COUNT(*) as potentially_complex_functions
FROM read_ast_objects('test/data/python/simple.py', 'python') AS ast,
     json_each(ast.nodes) AS je
WHERE json_extract_string(je.value, '$.type') = 'function_definition'
  AND (json_extract(je.value, '$.end.line')::INTEGER - json_extract(je.value, '$.start.line')::INTEGER) > 10;
----
0

# Scenario 7: Extract function signatures for documentation
query II
SELECT 
    json_extract_string(je.value, '$.name') as function_name,
    json_extract(je.value, '$.start.line') as defined_at_line
FROM read_ast_objects('test/data/python/simple.py', 'python') AS ast,
     json_each(ast.nodes) AS je
WHERE json_extract_string(je.value, '$.type') = 'function_definition'
ORDER BY defined_at_line;
----
hello	1
add	10
main	13
__init__	7

# Scenario 8: Find all string literals (for i18n analysis)
query I
SELECT COUNT(*) as string_literals
FROM read_ast_objects('test/data/python/simple.py', 'python') AS ast,
     json_each(ast.nodes) AS je
WHERE json_extract_string(je.value, '$.type') = 'string'
  AND json_extract_string(je.value, '$.content') IS NOT NULL;
----
0

# Scenario 9: Analyze code structure depth (nesting complexity)
query II
SELECT 
    MAX(json_extract(je.value, '$.depth')::INTEGER) as max_nesting,
    AVG(json_extract(je.value, '$.depth')::INTEGER) as avg_nesting
FROM read_ast_objects('test/data/python/simple.py', 'python') AS ast,
     json_each(ast.nodes) AS je;
----
8	4.263636363636364

# Scenario 10: Quick code quality assessment
query I
SELECT 
    CASE 
        WHEN complexity_score < 10 THEN 'Simple and clean'
        WHEN complexity_score < 30 THEN 'Moderate complexity'
        WHEN complexity_score < 50 THEN 'Complex, consider refactoring'
        ELSE 'Very complex, needs restructuring'
    END as quality_assessment
FROM (
    SELECT nodes.ast_complexity_score() as complexity_score
    FROM read_ast_objects('test/data/python/simple.py', 'python')
);
----
Moderate complexity