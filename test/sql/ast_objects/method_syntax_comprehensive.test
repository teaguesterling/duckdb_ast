# name: test/sql/ast_objects/method_syntax_comprehensive.test
# description: Comprehensive test suite for method syntax with parentheses
# group: [duckdb_ast]

require duckdb_ast

require json

# Test 1: Basic Method Syntax with Parentheses
# ============================================

# Single method calls
query IIII
SELECT 
    json_array_length((nodes).ast_find_type('function_definition')) as find_type,
    json_array_length((nodes).ast_function_names()) as func_names,
    json_array_length((nodes).ast_class_names()) as class_names,
    json_array_length((nodes).ast_identifiers()) as identifiers
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
4	4	1	19

# Test 2: Method Chaining with Parentheses
# ========================================

# Test helper macros for chaining tests
statement ok
CREATE OR REPLACE MACRO double_value(x) AS x * 2;

statement ok
CREATE OR REPLACE MACRO add_ten(x) AS x + 10;

statement ok
CREATE OR REPLACE MACRO make_info(x) AS {'value': x, 'doubled': x * 2, 'info': 'test'};

statement ok
CREATE OR REPLACE MACRO get_field(obj, field) AS json_extract(obj, '$.' || field);

# Two-level chaining
query I
SELECT (5).double_value().add_ten()
FROM (SELECT * FROM (VALUES (1)) t(x)) 
WHERE EXISTS (
    SELECT 1 FROM (VALUES (1)) 
    WHERE (SELECT (5).double_value() FROM (VALUES (1)) t2(y)) = 10
);
----
20

# Method chaining tests
query I
SELECT (5).double_value().add_ten();
----
20

# Three-level chaining
query I
SELECT (3).double_value().add_ten().double_value();
----
32

# Chaining with struct results
query I
SELECT (5).make_info().get_field('doubled');
----
10

# Test 3: AST Methods with Parentheses
# ====================================

# Basic AST operations with method syntax
query IIII
SELECT 
    json_array_length((nodes).ast_find_type('function_definition')) as functions,
    json_array_length((nodes).ast_find_type('class_definition')) as classes,
    json_extract((nodes).ast_summary(), '$.total_nodes') as total,
    json_extract((nodes).ast_summary(), '$.max_depth') as depth
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
4	1	110	8

# Test 4: Complex Method Chaining with AST
# ========================================

# Chain AST operations (simulated - these would need appropriate return types)
query I
SELECT json_array_length((nodes).ast_function_names())
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
4

# Using method syntax in subqueries
query I
SELECT (
    SELECT json_array_length((inner_nodes).ast_find_type('function_definition'))
    FROM (SELECT nodes as inner_nodes FROM read_ast_objects('test/data/python/simple.py', 'python')) sub
);
----
4

# Test 5: Method Syntax with json_each
# ====================================

# Process individual nodes with method syntax
query I
SELECT COUNT(*)
FROM read_ast_objects('test/data/python/simple.py', 'python') AS ast_result,
     json_each(ast_result.nodes) AS je
WHERE json_extract_string((je.value).ast_find_type('function_definition'), '$[0].type') = 'function_definition'
   OR json_extract_string(je.value, '$.type') = 'function_definition';
----
4

# Test 6: Equivalence Between All Three Styles
# ============================================

# Compare all three syntax styles for the same operation
query III
SELECT 
    -- Functional vs Method
    ast_find_type(nodes, 'function_definition') = (nodes).ast_find_type('function_definition') as func_vs_method,
    -- Functional vs Entrypoint  
    ast_find_type(nodes, 'function_definition') = ast(nodes).find_type('function_definition') as func_vs_entry,
    -- Method vs Entrypoint
    (nodes).ast_find_type('function_definition') = ast(nodes).find_type('function_definition') as method_vs_entry
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
true	true	true

# Test 7: Method Syntax Error Cases
# =================================

# Without parentheses should fail
#statement error
#SELECT nodes.ast_find_type('function_definition')
#FROM read_ast_objects('test/data/python/simple.py', 'python');
#----
#Binder Error

# Test 8: Method Syntax with Complex Expressions
# ==============================================

# Method syntax with CTE
query I
WITH first_10 AS (
    SELECT json_group_array(je.value) as subset_nodes
    FROM read_ast_objects('test/data/python/simple.py', 'python') AS ast,
         json_each(ast.nodes) AS je 
    WHERE je.key::INT < 10
)
SELECT json_array_length((subset_nodes).ast_find_type('identifier'))
FROM first_10;
----
1

# Note: double_value() was a test macro for exploring method syntax
# These tests are commented out as they're not relevant to AST functionality
# query I
# SELECT (3 + 2).double_value();
# ----
# 10
# 
# query I
# SELECT (CAST(5.7 AS INTEGER)).double_value();
# ----
# 10

# Test 9: Method Syntax in Various SQL Contexts
# =============================================

# In WHERE clauses
query I
SELECT COUNT(*)
FROM read_ast_objects('test/data/python/simple.py', 'python')
WHERE json_array_length((nodes).ast_find_type('function_definition')) > 3;
----
1

# In ORDER BY clauses
query I
SELECT json_array_length((nodes).ast_find_type('function_definition')) as func_count
FROM read_ast_objects('test/data/python/simple.py', 'python')
ORDER BY (func_count).double_value()
LIMIT 1;
----
4

# In GROUP BY clauses (with constants for demonstration)
query II
SELECT 
    (1).double_value() as doubled,
    COUNT(*) as count
FROM read_ast_objects('test/data/python/simple.py', 'python')
GROUP BY (1).double_value();
----
2	1

# Test 10: Method Syntax with CTEs and Subqueries
# ===============================================

# Method syntax in CTE
WITH ast_info AS (
    SELECT 
        (nodes).ast_find_type('function_definition') as functions,
        (nodes).ast_summary() as summary
    FROM read_ast_objects('test/data/python/simple.py', 'python')
)
SELECT 
    json_array_length(functions) as func_count,
    json_extract(summary, '$.max_depth') as max_depth
FROM ast_info;
----
4	8

# Method syntax in correlated subquery
query I
SELECT COUNT(*)
FROM read_ast_objects('test/data/python/simple.py', 'python') outer_ast
WHERE EXISTS (
    SELECT 1 
    FROM json_each((outer_ast.nodes).ast_find_type('function_definition')) AS func
    WHERE json_extract_string(func.value, '$.name') IS NOT NULL
);
----
1

# Test 11: Performance Comparison
# ===============================

# All three styles should have similar performance
query III
SELECT 
    json_array_length(ast_find_type(nodes, 'function_definition')) as functional,
    json_array_length((nodes).ast_find_type('function_definition')) as method,
    ast(nodes).find_type('function_definition').count_elements() as entrypoint
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
4	4	4

# Test 12: Method Syntax with Column References
# =============================================

# Create a table with AST data for testing
statement ok
CREATE TABLE ast_samples AS
SELECT 
    'sample1' as name,
    nodes as ast_nodes
FROM read_ast_objects('test/data/python/simple.py', 'python');

# Method syntax with column references
query II
SELECT 
    name,
    json_array_length((ast_nodes).ast_find_type('function_definition')) as func_count
FROM ast_samples;
----
sample1	4

# Method syntax with table.column references  
query II
SELECT 
    s.name,
    json_array_length((s.ast_nodes).ast_find_type('function_definition')) as func_count
FROM ast_samples s;
----
sample1	4

# Test 13: Advanced Method Chaining Scenarios
# ===========================================

# Simulate complex chaining (with appropriate helper macros)
statement ok
CREATE OR REPLACE MACRO array_length_macro(arr) AS json_array_length(arr);

query I
SELECT ((nodes).ast_find_type('function_definition')).array_length_macro()
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
4

# Test 14: Method Syntax Documentation Examples
# =============================================

# Examples that would appear in documentation
query IIII
SELECT 
    -- Traditional function style
    json_array_length(ast_find_type(nodes, 'function_definition')) as traditional,
    
    -- Method style with parentheses
    json_array_length((nodes).ast_find_type('function_definition')) as method,
    
    -- Entrypoint style (recommended)
    ast(nodes).find_type('function_definition').count_elements() as entrypoint,
    
    -- All should be equal
    (json_array_length(ast_find_type(nodes, 'function_definition')) = 
     ast(nodes).find_type('function_definition').count_elements())::INTEGER as all_equal
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
4	4	4	1
