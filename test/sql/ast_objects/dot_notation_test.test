# name: test/sql/ast_objects/dot_notation_test.test
# description: Test dot notation with various DuckDB features
# group: [duckdb_ast]

require duckdb_ast

require json

# Test 1: Dot notation works with struct fields
query II
SELECT 
    json_extract_string(nodes, '$[0].type') as first_type,
    json_extract_string(nodes, '$[0].name') as first_name
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
module	NULL

# Test 2: Dot notation DOES work with macros (surprising!)
query I
SELECT json_array_length(nodes.ast_get_type('function_definition'))
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
4

# Test 3: Correct macro syntax (function call)
query I
SELECT json_array_length(ast_get_type(nodes, 'function_definition')) as count
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
4

# Test 4: We can access JSON fields with arrow notation
query I
SELECT nodes->'$[0]'->>'type' as first_type
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
module

# Test 5: Create a struct to show dot notation works there
query II
WITH data AS (
    SELECT {'type': 'function', 'name': 'test'} as node
)
SELECT node.type, node.name FROM data;
----
function	test

# Test 6: Show that macros are global, not methods
# Even if we have a struct with a field named like our macro
query II
WITH data AS (
    SELECT {'ast_get_type': 'not_a_function', 'nodes': '[{"type": "test", "id": 1}]'::JSON} as obj
)
SELECT 
    obj.ast_get_type as field_value,
    json_array_length(ast_get_type(obj.nodes, 'test')) as macro_result
FROM data;
----
not_a_function	1