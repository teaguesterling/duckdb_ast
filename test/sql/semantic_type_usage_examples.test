# Practical examples of using semantic type helpers

require sitting_duck

statement ok
LOAD sitting_duck;

# Create test data with various code patterns
statement ok
CREATE TEMP TABLE code_ast AS 
SELECT * FROM read_ast('test/data/python/test_classes.py');

# Example 1: Find all function and class definitions
query II
SELECT context.name, semantic_type_to_string(context.semantic_type) as type
FROM code_ast
WHERE is_definition(context.semantic_type) 
  AND context.name IS NOT NULL
ORDER BY source.start_line;
----
calculate_sum	DEFINITION_FUNCTION
DataProcessor	DEFINITION_CLASS
process	DEFINITION_FUNCTION

# Example 2: Find all function calls
# Note: The 'sum' call doesn't have a name in the AST
query I
SELECT COUNT(*)
FROM code_ast
WHERE is_call(context.semantic_type);
----
1

# Example 3: Find all control flow constructs
query II
SELECT type, semantic_type_to_string(context.semantic_type) as semantic_type
FROM code_ast
WHERE is_control_flow(context.semantic_type)
ORDER BY source.start_line;
----
return_statement	FLOW_JUMP
return	FLOW_JUMP
return_statement	FLOW_JUMP
return	FLOW_JUMP
for_in_clause	FLOW_LOOP
for	FLOW_LOOP

# Example 4: Build a summary of code structure
query II
SELECT 
    get_super_kind(context.semantic_type) as category,
    COUNT(*) as node_count
FROM code_ast
GROUP BY category
ORDER BY node_count DESC, category;
----
COMPUTATION	12
CONTROL_EFFECTS	12
DATA_STRUCTURE	12
META_EXTERNAL	12

# Example 5: Find specific types by name
query I
SELECT COUNT(*)
FROM code_ast
WHERE context.semantic_type = semantic_type_code('DEFINITION_FUNCTION');
----
4

# Example 6: Filter to only searchable types for building an index
statement ok
CREATE TEMP TABLE code_index AS
SELECT node_id, context.name, type, context.semantic_type, source.start_line, source.end_line
FROM code_ast
WHERE context.semantic_type = ANY(get_searchable_types())
  AND context.name IS NOT NULL;

query I
SELECT COUNT(*) FROM code_index;
----
14

# Example 7: Analyze code patterns
query II
WITH function_calls AS (
    SELECT COALESCE(context.name, '<anonymous>') as name, COUNT(*) as call_count
    FROM code_ast
    WHERE is_call(context.semantic_type)
    GROUP BY context.name
)
SELECT * FROM function_calls
ORDER BY call_count DESC, name;
----
<anonymous>	1

# Example 8: Find error handling patterns
query I
SELECT COUNT(DISTINCT structure.parent_id) as try_blocks
FROM code_ast
WHERE context.semantic_type IN (
    semantic_type_code('ERROR_TRY'),
    semantic_type_code('ERROR_CATCH'),
    semantic_type_code('ERROR_THROW'),
    semantic_type_code('ERROR_FINALLY')
);
----
0

# Example 9: Create a code navigation index
query IIII
SELECT 
    context.name,
    semantic_type_to_string(context.semantic_type) as type,
    source.start_line,
    source.end_line
FROM code_ast
WHERE context.semantic_type IN (
    semantic_type_code('DEFINITION_FUNCTION'),
    semantic_type_code('DEFINITION_CLASS'),
    semantic_type_code('EXTERNAL_IMPORT')
)
AND context.name IS NOT NULL
ORDER BY source.start_line;
----
calculate_sum	DEFINITION_FUNCTION	1	2
DataProcessor	DEFINITION_CLASS	4	6
process	DEFINITION_FUNCTION	5	6

# Example 10: Language-agnostic search
statement ok
CREATE TEMP TABLE multi_lang_ast AS
SELECT *, 'python' as language FROM parse_ast('def hello(): pass', 'python')
UNION ALL
SELECT *, 'javascript' as language FROM parse_ast('function hello() {}', 'javascript')
UNION ALL
SELECT *, 'java' as language FROM parse_ast('public void hello() {}', 'java');

query III
SELECT 
    language,
    context.name,
    semantic_type_to_string(context.semantic_type) as type
FROM multi_lang_ast
WHERE is_definition(context.semantic_type)
  AND context.name = 'hello'
ORDER BY language;
----
java	hello	DEFINITION_FUNCTION
javascript	hello	DEFINITION_FUNCTION
python	hello	DEFINITION_FUNCTION