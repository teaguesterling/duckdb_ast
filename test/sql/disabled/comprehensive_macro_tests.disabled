# name: test/sql/ast_objects/comprehensive_macro_tests.test
# description: Comprehensive test suite for all AST macros - functional style
# group: [duckdb_ast]

require duckdb_ast

require json

# Test 1: Core Finding Functions
# =============================

# ast_get_type - single type
query I
SELECT json_array_length(ast_get_type(nodes, 'function_definition'))
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
4

# ast_get_type - multiple types (array)
query I
SELECT json_array_length(ast_get_type(nodes, ['function_definition', 'class_definition']))
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
5

# ast_get_type - nonexistent type (should return empty array, not null)
query I
SELECT json_array_length(ast_get_type(nodes, 'nonexistent_type'))
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
0

# Test 2: Name Extraction Functions
# =================================

# ast_function_names
query I
SELECT json_array_length(ast_get_names(nodes, node_type:='function_definition'))
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
4

# ast_class_names  
query I
SELECT json_array_length(ast_get_names(nodes, node_type:='class_definition'))
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
1

# ast_identifiers
query I
SELECT json_array_length(ast_get_names(nodes, node_type:='identifier'))
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
19

# ast_strings (string literals)
query I
SELECT json_array_length(ast_strings(nodes))
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
0

# Test 3: Depth and Hierarchy Functions
# =====================================

# ast_get_depth - single depth
query I
SELECT json_array_length(ast_get_depth(nodes, 1))
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
4

# ast_get_depth - multiple depths (array)
query I
SELECT json_array_length(ast_get_depth(nodes, [1, 2]))
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
22

# ast_nav_children - get children of root node (id=0)
query I
SELECT json_array_length(ast_nav_children(nodes, 0))
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
4

# Test 4: Analysis Functions
# ==========================

# ast_type_counts
query I
SELECT json_extract_string(ast_type_counts(nodes), '$.function_definition') IS NOT NULL
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
true

# ast_summary
query III
SELECT 
    json_extract(ast_summary(nodes), '$.total_nodes'),
    json_extract(ast_summary(nodes), '$.function_count'),
    json_extract(ast_summary(nodes), '$.max_depth')
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
110	4	8

# ast_function_details
query I
SELECT json_array_length(ast_function_details(nodes))
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
4

# Test 5: Edge Cases and Error Handling
# =====================================

# Empty input
query I
SELECT json_array_length(ast_get_type('[]'::JSON, 'function_definition'));
----
0

# Null input handling
query I
SELECT json_array_length(ast_get_type(NULL, 'function_definition'));
----
0

# Invalid node structure
query I
SELECT json_array_length(ast_get_type('[{"invalid": "node"}]'::JSON, 'function_definition'));
----
0

# Test 6: Utility Array Functions
# ===============================

# ensure_varchar_array - single value
query I
SELECT array_length(ensure_varchar_array('test'));
----
1

# ensure_varchar_array - array value
query I
SELECT array_length(ensure_varchar_array(['test1', 'test2']));
----
2

# ensure_varchar_array - null value
query I
SELECT array_length(ensure_varchar_array(NULL));
----
0

# ensure_integer_array - single value
query I
SELECT array_length(ensure_integer_array(5));
----
1

# ensure_integer_array - array value
query I
SELECT array_length(ensure_integer_array([1, 2, 3]));
----
3

# Test 7: Complex Queries with Multiple Macros
# ============================================

# Combine multiple extraction functions
query IIII
SELECT 
    json_array_length(ast_get_type(nodes, 'function_definition')) as functions,
    json_array_length(ast_get_type(nodes, 'class_definition')) as classes,
    json_array_length(ast_get_names(nodes, node_type:='identifier')) as identifiers,
    json_extract(ast_summary(nodes), '$.total_nodes') as total_nodes
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
4	1	19	110

# Filter nodes and analyze
query II
SELECT 
    json_array_length(ast_get_depth(nodes, 1)) as depth_1_count,
    json_array_length(ast_get_depth(nodes, 2)) as depth_2_count
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
4	18

# Test 8: Working with Filtered Results
# =====================================

# Get function names from function nodes
query I
SELECT json_array_length(ast_get_names(ast_get_type(nodes, 'function_definition', node_type:='function_definition')))
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
4

# Get children of first function
query I
SELECT json_array_length(
    ast_nav_children(
        nodes, 
        json_extract(json_extract(ast_get_type(nodes, 'function_definition'), '$[0]'), '$.id')::INTEGER
    )
)
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
5

# Test 9: Performance and Large Data
# ==================================

# Test with deeply nested structures
query I
SELECT json_extract(ast_summary(nodes), '$.max_depth')::INTEGER > 5
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
true

# Test with many nodes
query I
SELECT json_extract(ast_summary(nodes), '$.total_nodes')::INTEGER > 50
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
true

# Test 10: Type Safety and Validation
# ===================================

# Test different input types for ensure functions
query III
SELECT 
    array_length(ensure_varchar_array('single')),
    array_length(ensure_varchar_array(['array', 'input'])),
    array_length(ensure_varchar_array(NULL))
----
1	2	0

# Test integer array handling
query III
SELECT 
    array_length(ensure_integer_array(42)),
    array_length(ensure_integer_array([1, 2, 3, 4])),
    array_length(ensure_integer_array(NULL))
----
1	4	0