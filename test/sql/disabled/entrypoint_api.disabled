# DISABLED: Tests functionality removed in minimal API redesign
# Original test tested: # description: Test the new ast() entrypoint API with method chaining
# Disabled on: Mon May 26 10:30:50 AM PDT 2025

# name: test/sql/ast_objects/entrypoint_api.test
# description: Test the new ast() entrypoint API with method chaining
# group: [duckdb_ast]

require duckdb_ast

require json

# Test 1: Basic ast() entrypoint normalization
query I
SELECT json_array_length(ast(nodes))
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
110

# Test 2: ast() with method chaining
query I
SELECT ast(nodes).find_type('function_definition').count_elements()
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
4

# Test 3: Compare old vs new syntax (should be equivalent)
query I
SELECT 
    (ast_get_type(nodes, 'function_definition') = 
    ast(nodes).find_type('function_definition'))::INTEGER as equivalent
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
1

# Test 4: Complex chaining
query II
SELECT 
    ast(nodes).find_type('function_definition').count_elements() as functions,
    ast(nodes).find_type('class_definition').count_elements() as classes
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
4	1

# Test 5: Extract and chain operations
query I
SELECT ast(nodes).function_names().count_elements()
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
4

# Test 6: Working with filtered results
query I
SELECT ast(nodes).find_type('function_definition').extract_names().count_elements()
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
4

# Test 7: Multi-level chaining
query I
SELECT ast(nodes).find_type('function_definition').first_element().where_type('identifier').count_elements()
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
0

# Test 8: Working with individual nodes from json_each
query I
SELECT COUNT(*)
FROM read_ast_objects('test/data/python/simple.py', 'python') AS ast_result,
     json_each(ast_result.nodes) AS je
WHERE ast(je.value).where_type('function_definition').count_elements() = 1;
----
4

# Test 9: Using ast() with struct input (simulated)
statement ok
CREATE TABLE test_structs AS 
SELECT {'nodes': nodes, 'metadata': {'file': 'test.py'}} as ast_struct
FROM read_ast_objects('test/data/python/simple.py', 'python');

query I
SELECT ast(ast_struct).function_names().count_elements()
FROM test_structs;
----
0

# Test 10: Null input handling
query I
SELECT ast(NULL).count_elements();
----
0

# Test 11: String input handling  
query I
SELECT ast('[]').count_elements();
----
0

# Test 12: Single object input (wrapped in array)
query I
SELECT ast('{"type": "test", "name": "example"}').count_elements();
----
1

# Test 13: Depth-based filtering
query I
SELECT ast(nodes).where_depth(1).count_elements()
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
4

# Test 14: Summary information
query I
SELECT json_extract(ast(nodes).summary(), '$.total_nodes')
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
110

# Test 15: Combining multiple operations
query III
SELECT 
    ast(nodes).find_type('function_definition').count_elements() as func_count,
    ast(nodes).identifiers().count_elements() as id_count,
    json_extract(ast(nodes).summary(), '$.max_depth') as max_depth
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
4	19	8