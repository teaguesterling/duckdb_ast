# name: test/sql/hybrid_ast_objects.test
# description: Test hybrid read_ast_objects function
# group: [duckdb_ast]

require duckdb_ast

require json

# Test 1: Basic functionality - returns one row per file
query I
SELECT COUNT(*) FROM read_ast_objects('test/data/python/simple.py', 'python');
----
1

# Test 2: Check structured metadata columns
query IIII
SELECT 
    file_path = 'test/data/python/simple.py' as correct_path,
    language = 'python' as correct_language,
    node_count > 0 as has_nodes,
    max_depth > 0 as has_depth
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
true	true	true	true

# Test 3: Struct nodes column contains valid array
query I
SELECT len(nodes) > 0 as has_nodes FROM read_ast_objects('test/data/python/simple.py', 'python');
----
true

# Test 4: Can access struct fields
query I
SELECT nodes[1].type IS NOT NULL as has_root_type
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
true

# Test 5: Check that we have named nodes in the structs
query I
SELECT len([node for node in nodes if node.name IS NOT NULL AND node.name != '']) > 0 as has_named_nodes
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
true

# Test 7: Error handling - non-existent file
statement error
SELECT * FROM read_ast_objects('test/data/python/nonexistent.py', 'python');
----
IO Error: File not found: test/data/python/nonexistent.py

# Test 8: Node count matches struct array length
query I
SELECT node_count = len(nodes) as counts_match
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
true