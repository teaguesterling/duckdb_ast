# Test tree navigation helper functions

require duckdb_ast

statement ok
LOAD duckdb_ast;

# Load the tree helper macros
statement ok
source 'src/sql_macros/06_tree_helpers.sql';

# Test get_children
query I
WITH ast_data AS (
    SELECT * FROM read_ast('test/data/cpp/simple.cpp')
)
SELECT COUNT(*) as child_count
FROM get_children(ast_data, 0);
----
4

# Test get_descendants - should include the node itself
query I
WITH ast_data AS (
    SELECT * FROM read_ast('test/data/cpp/simple.cpp')
),
func_node AS (
    SELECT node_id, descendant_count
    FROM ast_data
    WHERE type = 'function_definition'
    LIMIT 1
)
SELECT COUNT(*) = fn.descendant_count + 1 as matches_descendant_count
FROM func_node fn
CROSS JOIN LATERAL (
    SELECT COUNT(*) as count
    FROM get_descendants(ast_data, fn.node_id)
) d;
----
true

# Test get_n_descendants
query I
WITH ast_data AS (
    SELECT * FROM read_ast('test/data/cpp/simple.cpp')
)
SELECT COUNT(*) as limited_descendants
FROM get_n_descendants(ast_data, 0, 5);
----
5

# Test get_subtree - should exclude the root node
query I
WITH ast_data AS (
    SELECT * FROM read_ast('test/data/cpp/simple.cpp')
),
func_node AS (
    SELECT node_id, descendant_count
    FROM ast_data
    WHERE type = 'function_definition'
    LIMIT 1
)
SELECT COUNT(*) = fn.descendant_count as matches_descendant_count
FROM func_node fn
CROSS JOIN LATERAL (
    SELECT COUNT(*) as count
    FROM get_subtree(ast_data, fn.node_id)
) d;
----
true

# Test find_nearest_ancestor_of_type
query I
WITH ast_data AS (
    SELECT * FROM read_ast('test/data/cpp/simple.cpp')
),
identifier_node AS (
    SELECT node_id
    FROM ast_data
    WHERE type = 'identifier' AND parent_id > 0
    LIMIT 1
)
SELECT type
FROM find_nearest_ancestor_of_type(ast_data, identifier_node.node_id, 'function_definition')
FROM identifier_node;
----
function_definition

# Test the improved function extractor
statement ok
source 'workspace/tree_based_function_extractor_v2.sql';

query IIIII
SELECT function_name, function_type, start_line, end_line, param_count
FROM extract_functions_tree_based('test/data/cpp/simple.cpp')
ORDER BY start_line;
----
calculate	function	8	10	2
greet	function	12	14	1
main	function	16	20	0