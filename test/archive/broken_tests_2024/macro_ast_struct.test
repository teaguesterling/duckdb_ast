# name: test/sql/macro_ast_struct.test
# description: Test SQL macro compatibility with new AST struct format
# group: [ast_struct]

require duckdb_ast

# Test basic macro functionality with AST struct
statement ok
CREATE TABLE ast_struct_test AS 
SELECT ast FROM read_ast_objects('test/data/javascript/simple.js');

# Test that existing macros can work with the struct format by extracting nodes
statement ok
CREATE TABLE extracted_nodes AS
SELECT unnest(ast.nodes) as node FROM ast_struct_test;

# Test ast_get_names equivalent with struct format
query I
SELECT count(DISTINCT node.name) FROM extracted_nodes 
WHERE node.name IS NOT NULL AND node.name != '';
----
4

# Test type filtering with struct format  
query I
SELECT count(*) FROM extracted_nodes
WHERE node.type = 'identifier';
----
4

# Test depth-based queries with struct format
query I
SELECT max(node.depth) FROM extracted_nodes;
----
3

# Test parent-child relationships with struct format
query I
SELECT count(*) FROM extracted_nodes child
JOIN extracted_nodes parent ON child.parent_id = parent.node_id;
----
10

# Test subtree extraction using new count fields
# This is a new capability enabled by the struct format
statement ok
CREATE TABLE function_subtrees AS
WITH functions AS (
    SELECT 
        node.node_id,
        node.descendant_count,
        row_number() OVER (ORDER BY node.node_id) - 1 as start_idx
    FROM extracted_nodes
    WHERE node.type = 'function_declaration'
)
SELECT 
    f.node_id as function_id,
    n.*
FROM functions f
JOIN (
    SELECT 
        node.*,
        row_number() OVER (ORDER BY node.node_id) - 1 as node_idx
    FROM extracted_nodes
) n ON n.node_idx BETWEEN f.start_idx AND f.start_idx + f.descendant_count;

# Verify subtree extraction worked correctly
query I
SELECT count(DISTINCT function_id) FROM function_subtrees;
----
1

query I
SELECT count(*) FROM function_subtrees;
----
6

# Test macro-style source text extraction with struct
query I
SELECT length(node.source_text) > 0 
FROM extracted_nodes 
WHERE node.type = 'function_declaration'
LIMIT 1;
----
true

# Test combining AST struct with traditional table functions
# This tests backward compatibility and migration path
statement ok
CREATE TABLE hybrid_test AS
SELECT 
    struct_ast.ast.file_path as struct_file,
    obj_ast.file_path as object_file,
    length(struct_ast.ast.nodes) as struct_count,
    count(obj_ast.node_id) as object_count
FROM 
    (SELECT ast FROM read_ast_objects('test/data/javascript/simple.js')) struct_ast,
    (SELECT * FROM read_ast_objects('test/data/javascript/simple.js')) obj_ast
GROUP BY struct_ast.ast.file_path, obj_ast.file_path, length(struct_ast.ast.nodes);

# Verify both approaches give same results
query I
SELECT struct_count = object_count FROM hybrid_test;
----
true

# Test new macro patterns enabled by struct format
# Pattern: Get all nodes of specific types from multiple subtrees
statement ok
CREATE TABLE pattern_test AS
WITH identifiers_in_functions AS (
    SELECT 
        func.node_id as function_id,
        ident.*
    FROM 
        (SELECT node.* FROM extracted_nodes WHERE node.type = 'function_declaration') func,
        (SELECT node.*, row_number() OVER (ORDER BY node.node_id) - 1 as pos FROM extracted_nodes) ident,
        (SELECT node.node_id, row_number() OVER (ORDER BY node.node_id) - 1 as func_pos FROM extracted_nodes WHERE node.type = 'function_declaration') func_pos
    WHERE ident.type = 'identifier'
      AND ident.pos BETWEEN func_pos.func_pos AND func_pos.func_pos + func.descendant_count
      AND func_pos.node_id = func.node_id
)
SELECT function_id, count(*) as identifier_count
FROM identifiers_in_functions
GROUP BY function_id;

# Verify pattern extraction found identifiers
query I
SELECT identifier_count > 0 FROM pattern_test;
----
true

# Test performance characteristics - struct should enable O(1) subtree operations
# This test verifies the conceptual framework rather than actual performance
query I
SELECT 
    'O(1) subtree extraction enabled' as performance_note,
    count(*) as nodes_processed
FROM (
    WITH target_function AS (
        SELECT 
            node.node_id,
            node.descendant_count,
            row_number() OVER (ORDER BY node.node_id) - 1 as start_pos
        FROM extracted_nodes
        WHERE node.type = 'function_declaration'
        LIMIT 1
    )
    SELECT n.*
    FROM extracted_nodes n, target_function f
    JOIN (
        SELECT 
            node.node_id,
            row_number() OVER (ORDER BY node.node_id) - 1 as pos
        FROM extracted_nodes
    ) indexed ON indexed.node_id = n.node_id
    WHERE indexed.pos BETWEEN f.start_pos AND f.start_pos + f.descendant_count
);
----
O(1) subtree extraction enabled	6

# Clean up
statement ok
DROP TABLE ast_struct_test;

statement ok
DROP TABLE extracted_nodes;

statement ok
DROP TABLE function_subtrees;

statement ok
DROP TABLE hybrid_test;

statement ok
DROP TABLE pattern_test;