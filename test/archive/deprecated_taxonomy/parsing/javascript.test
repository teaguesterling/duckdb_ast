# name: test/sql/parsing/javascript.test
# description: Test JavaScript parsing functionality
# group: [sitting_duck]

require sitting_duck

require json

# Test 1: Basic JavaScript parsing works
# ======================================

query I
SELECT COUNT(*) > 0 as parsed
FROM read_ast('test/data/javascript/simple.js', 'javascript');
----
true

# Test 2: JavaScript has expected node types
# ==========================================

query I
SELECT DISTINCT type
FROM read_ast('test/data/javascript/simple.js', 'javascript')
WHERE type IN ('function_declaration', 'class_declaration', 'lexical_declaration', 'arrow_function')
ORDER BY type;
----
arrow_function
class_declaration
function_declaration
lexical_declaration

# Test 3: Extract function names
# ==============================

query I
SELECT name
FROM read_ast('test/data/javascript/simple.js', 'javascript')
WHERE type = 'function_declaration'
ORDER BY name;
----
fetchData
hello

# Test 4: Extract class names
# ===========================

query I
SELECT name
FROM read_ast('test/data/javascript/simple.js', 'javascript')
WHERE type = 'class_declaration';
----
Calculator

# Test 5: Count arrow functions
# =============================

query I
SELECT COUNT(*) as arrow_function_count
FROM read_ast('test/data/javascript/simple.js', 'javascript')
WHERE type = 'arrow_function';
----
2

# Test 6: Using read_ast_objects with JavaScript  
# ==============================================

query I
SELECT json_array_length(nodes) > 0 as has_nodes
FROM read_ast_objects('test/data/javascript/simple.js', 'javascript');
----
true

# Test 7: Use SQL macros with JavaScript AST
# ==========================================

query I
SELECT json_array_length(ast_get_type(nodes, 'function_declaration'))
FROM read_ast_objects('test/data/javascript/simple.js', 'javascript');
----
2

# Test 8: Extract method names from class
# =======================================

query II
SELECT class_node.name as class_name, method_node.name as method_name
FROM read_ast('test/data/javascript/simple.js', 'javascript') class_node
JOIN read_ast('test/data/javascript/simple.js', 'javascript') class_body
  ON class_node.node_id = class_body.parent_id
JOIN read_ast('test/data/javascript/simple.js', 'javascript') method_node
  ON class_body.node_id = method_node.parent_id
WHERE class_node.type = 'class_declaration'
  AND class_body.type = 'class_body'
  AND method_node.type = 'method_definition'
ORDER BY class_name, method_name;
----
Calculator	add
Calculator	constructor
Calculator	subtract

# Test 9: JavaScript alias 'js' works
# ===================================

query I
SELECT COUNT(*) > 0 as parsed
FROM read_ast('test/data/javascript/simple.js', 'js');
----
true