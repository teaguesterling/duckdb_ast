# name: test/sql/basic_unified_backend.test
# description: Test basic unified backend functionality
# group: [sitting_duck]

require sitting_duck

require json

# Test 1: Basic table function works
query I
SELECT COUNT(*) > 0 FROM parse_ast('def hello(): pass', 'python');
----
true

# Test 2: Check new schema includes taxonomy fields  
query I
SELECT COUNT(*) FROM (
    SELECT node_id, type, normalized_type, name, file_path, 
           start_line, start_column, end_line, end_column, parent_id, 
           depth, sibling_index, children_count, descendant_count, peek,
           kind, universal_flags, semantic_id, super_type, arity_bin
    FROM parse_ast('def hello(): pass', 'python')
    LIMIT 1
);
----
1

# Test 3: Type normalization works
query II
SELECT type, normalized_type 
FROM parse_ast('def hello(): pass', 'python')
WHERE type = 'function_definition';
----
function_definition	function_declaration

# Test 4: Name extraction works  
query II
SELECT type, name
FROM parse_ast('def hello(): pass', 'python')
WHERE type = 'function_definition';
----
function_definition	hello

# Test 5: Flags detection works
query II
SELECT type, universal_flags
FROM parse_ast('def hello(): pass', 'python')
WHERE type = 'def';
----
def	2

# Test 6: read_ast works with file
statement ok
CREATE TEMP TABLE test_py AS 
SELECT 'def hello():\n    return "world"' as content;

# Test 7: read_ast_objects returns AST struct
query I
SELECT typeof(ast) FROM read_ast_objects('test/data/python/simple.py');
----
STRUCT(source STRUCT("file_path" VARCHAR, "language" VARCHAR), nodes STRUCT("node_id" BIGINT, "type" VARCHAR, "normalized_type" VARCHAR, "name" VARCHAR, "start_line" INTEGER, "end_line" INTEGER, "start_column" INTEGER, "end_column" INTEGER, "parent_id" BIGINT, "depth" INTEGER, "sibling_index" INTEGER, "children_count" INTEGER, "descendant_count" INTEGER, "peek" VARCHAR, "kind" TINYINT, "universal_flags" TINYINT, "semantic_id" BIGINT, "super_type" TINYINT, "arity_bin" TINYINT)[])

# Test 8: AST struct has correct structure
query II  
SELECT ast.source.file_path, ast.source.language
FROM read_ast_objects('test/data/python/simple.py');
----
test/data/python/simple.py	python

# Test 9: Cross-function consistency - same input produces same nodes
query I
WITH parse_result AS (
    SELECT node_id, type, name FROM parse_ast('def hello(): pass', 'python')
),
objects_result AS (
    SELECT unnest(ast.nodes, recursive := true) as node 
    FROM read_ast_objects('<inline>', 'python') 
    WHERE ast.source.file_path = '<inline>'
)
SELECT COUNT(*) FROM parse_result p
JOIN objects_result o ON p.node_id = o.node.node_id AND p.type = o.node.type;
----
6

# Test 10: Language adapter registry works
query I
SELECT COUNT(*) >= 3 FROM (
    VALUES ('python'), ('javascript'), ('cpp')
) langs(lang)
WHERE EXISTS (
    SELECT 1 FROM parse_ast('x = 1', lang.lang) LIMIT 1
);
----
true