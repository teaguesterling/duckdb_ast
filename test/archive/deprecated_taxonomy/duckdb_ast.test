# name: test/sql/sitting_duck.test
# description: Test sitting_duck extension
# group: [sitting_duck]

# Before we load the extension, this will fail
statement error
SELECT * FROM read_ast('test.py', 'python');
----
Catalog Error: Table Function with name read_ast does not exist!

# Require statement will ensure this test is run with this extension loaded
require sitting_duck

# Test 1: Verify basic functionality returns results
query I
SELECT COUNT(*) > 0 FROM read_ast('test/data/python/simple.py', 'python');
----
true

# Test 2: Check that we get the module root node
query III
SELECT type, parent_id IS NULL as is_root, depth 
FROM read_ast('test/data/python/simple.py', 'python')
WHERE type = 'module';
----
module	true	0

# Test 3: Find all function definitions with names
query III
SELECT type, name, start_line
FROM read_ast('test/data/python/simple.py', 'python')
WHERE type = 'function_definition'
ORDER BY start_line;
----
function_definition	hello	1
function_definition	__init__	7
function_definition	add	10
function_definition	main	13

# Test 4: Find the class definition
query III
SELECT type, name, start_line
FROM read_ast('test/data/python/simple.py', 'python')
WHERE type = 'class_definition';
----
class_definition	MyClass	5

# Test 5: Count nodes by type
query II
SELECT type, COUNT(*) as count
FROM read_ast('test/data/python/simple.py', 'python')
WHERE type IN ('function_definition', 'class_definition', 'identifier', 'string')
GROUP BY type
ORDER BY count DESC, type ASC;
----
identifier	19
function_definition	4
string	4
class_definition	1

# Test 6: Verify depth calculation
query II
SELECT MIN(depth), MAX(depth) 
FROM read_ast('test/data/python/simple.py', 'python');
----
0	8

# Test 7: Test parent-child relationships
query I
WITH parents AS (
    SELECT node_id, type, name
    FROM read_ast('test/data/python/simple.py', 'python')
    WHERE type = 'class_definition' AND name = 'MyClass'
)
SELECT COUNT(*)
FROM read_ast('test/data/python/simple.py', 'python') ast
JOIN parents p ON ast.parent_id = p.node_id
WHERE ast.type = 'block';
----
1

# Test 8: Test source text extraction
query II
SELECT type, LENGTH(source_text) > 0 as has_source
FROM read_ast('test/data/python/simple.py', 'python')
WHERE type IN ('function_definition', 'class_definition')
GROUP BY type, has_source
ORDER BY type;
----
class_definition	true
function_definition	true

# Test 9: Test with empty file
query I
SELECT COUNT(*) FROM read_ast('test/data/python/empty.py', 'python');
----
1

# Test 10: Test with syntax error file - should still parse partial AST
query I
SELECT COUNT(*) > 0 FROM read_ast('test/data/python/syntax_error.py', 'python');
----
true

# Test 11: Error handling - non-existent file
statement error
SELECT * FROM read_ast('test/data/python/nonexistent.py', 'python');
----
IO Error: Failed to parse file

# Test 12: Error handling - unsupported language
statement error
SELECT * FROM read_ast('test/data/python/simple.py', 'unsupported_language');
----
IO Error: Failed to parse file

# Test 13: Test identifier name extraction
query II
SELECT name, COUNT(*) as count
FROM read_ast('test/data/python/simple.py', 'python')
WHERE type = 'identifier' AND name IS NOT NULL AND name != ''
GROUP BY name
HAVING COUNT(*) > 1
ORDER BY count DESC, name;
----
self	3
MyClass	2
hello	2
main	2
x	2
y	2

# Test 14: Complex query - find methods in classes
query IIII
WITH class_nodes AS (
    SELECT node_id, name as class_name, start_line as class_start, end_line as class_end
    FROM read_ast('test/data/python/simple.py', 'python')
    WHERE type = 'class_definition'
),
method_nodes AS (
    SELECT node_id, name as method_name, start_line, end_line
    FROM read_ast('test/data/python/simple.py', 'python')
    WHERE type = 'function_definition'
)
SELECT c.class_name, m.method_name, m.start_line, m.end_line - m.start_line + 1 as lines
FROM method_nodes m
JOIN class_nodes c ON m.start_line > c.class_start AND m.end_line <= c.class_end
ORDER BY m.start_line;
----
MyClass	__init__	7	2
MyClass	add	10	2

# Test 15: Unicode support
query III
SELECT type, name, LENGTH(name) as name_len
FROM read_ast('test/data/python/unicode.py', 'python')
WHERE type IN ('function_definition', 'class_definition')
ORDER BY start_line;
----
function_definition	你好	2
class_definition	ÜmläutClass	11
function_definition	café	4

# Test 16: Deep nesting
query I
SELECT MAX(depth) FROM read_ast('test/data/python/deep_nesting.py', 'python');
----
17

# Test 17: Python decorators
query II
SELECT type, COUNT(*) as count
FROM read_ast('test/data/python/decorators.py', 'python')
WHERE type LIKE '%decorator%' OR type LIKE '%async%' OR type LIKE '%yield%'
GROUP BY type
ORDER BY type;
----
async	1
decorator	3
yield	2

# Test 18: Comments and strings
query II
SELECT type, COUNT(*) as count
FROM read_ast('test/data/python/comments.py', 'python')
WHERE type IN ('comment', 'string', 'expression_statement')
GROUP BY type
ORDER BY count DESC, type DESC;
----
comment	5
string	3
expression_statement	3
