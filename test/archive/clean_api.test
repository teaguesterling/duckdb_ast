# name: test/sql/clean_api.test
# description: Test the new clean API functions
# group: [duckdb_ast]

require duckdb_ast

require json

# Test 1: Basic Extraction Functions
# ==================================

# ast_get_type - single type
query I
SELECT json_array_length(ast_get_type(nodes, 'function_definition'))
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
4

# ast_get_names - all names
query I
SELECT json_array_length(ast_get_names(nodes))
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
24

# ast_get_names - filtered by type
query I
SELECT json_array_length(ast_get_names(nodes, node_type:='function_definition'))
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
4

# ast_get_depth - single depth
query I
SELECT json_array_length(ast_get_depth(nodes, 1))
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
4

# ast_get_depth - multiple depths
query I
SELECT json_array_length(ast_get_depth(nodes, [1, 2]))
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
22

# Test 2: Filtering Functions
# ===========================

# ast_filter_pattern - name contains 'a'
query I
SELECT json_array_length(ast_filter_pattern(nodes, '%a%'))
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
10

# Removed: ast_filter_depth_range not in minimal API

# ast_filter_has_name
query I
SELECT json_array_length(ast_filter_has_name(nodes))
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
24

# Test 3: Navigation Functions
# ============================

# ast_nav_children - root node children
query I
SELECT json_array_length(ast_nav_children(nodes, 0))
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
4

# Test 4: Analysis Functions
# ==========================

# ast_summary
query I
SELECT json_extract(ast_summary(nodes), '$.total_nodes')
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
110

# ast_summary types - check it returns JSON object with types
query I
SELECT json_extract_string(ast_summary(nodes), '$.types.function_definition') IS NOT NULL
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
true

# Test 5: Chain Methods with ast() Entrypoint
# ============================================

# Test 5: Short Name Registration and Method Syntax
# =================================================

# Register short names (creates unprefixed aliases)
statement ok
SELECT duckdb_ast_register_short_names();

# Single-level method syntax works after registration
query I
SELECT json_array_length(nodes.get_type('function_definition'))
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
4

# Alternative: use ast() normalizer with method syntax
query I 
SELECT json_array_length(ast(nodes).get_type('function_definition'))
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
4

# Can use short names as regular functions too
query I
SELECT json_array_length(get_type(nodes, 'class_definition'))
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
1

# Test 6: Method chaining works with non-conflicting names
# =========================================================

query I
SELECT ast(nodes).get_type('function_definition').count_nodes()
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
4

# Longer chain with filtering
query I
SELECT ast(nodes).get_type('function_definition').filter_pattern('%hello%').count_nodes()
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
1

# Get first node and extract name
query I
SELECT json_extract_string(ast(nodes).get_type('function_definition').first_node(), '$.name')
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
hello

# Test 6: Help System
# ===================

# ast_help returns JSON with expected structure
query I
SELECT json_extract_string(ast_help(), '$.description') LIKE '%DuckDB AST Extension%'
----
true

# Test 7: Backward Compatibility
# ==============================

# Old function names would work as aliases if short names were registered
# Skipping for now as short name registration not yet implemented

# Test 8: Edge Cases and Null Safety
# ==================================

# Functions handle NULL input gracefully
query III
SELECT 
    json_array_length(ast_get_type(NULL, 'function_definition')) as null_input,
    json_array_length(ast_get_names('[]'::JSON)) as empty_input,
    json_array_length(ast_get_depth(nodes, 999)) as nonexistent_depth
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
0	0	0

# Test 9: Type Consistency
# ========================

# All get functions return JSON arrays
query I
SELECT 
    typeof(ast_get_type(nodes, 'function_definition')) = 'JSON' AND
    typeof(ast_get_names(nodes)) = 'JSON' AND 
    typeof(ast_get_depth(nodes, 1)) = 'JSON'
FROM read_ast_objects('test/data/python/simple.py', 'python');
----
true

# Extract functions would return SQL arrays if chain methods were implemented
# Skipping for now as chain methods not yet implemented
#query I
#SELECT 
#    typeof(ast(nodes).extract_names()) = 'VARCHAR[]' AND
#    typeof(ast(nodes).extract_types()) = 'VARCHAR[]' AND
#    typeof(ast(nodes).extract_ids()) = 'INTEGER[]'
#FROM read_ast_objects('test/data/python/simple.py', 'python');
#----
#true