## Getting Started with DuckDB Extension Development

Here's a systematic approach to begin developing the Code Navigator extension:

### 1. Development Environment Setup

```bash
# Clone DuckDB repository (needed for headers and build system)
git clone https://github.com/duckdb/duckdb.git
cd duckdb

# Check out a stable version
git checkout v1.1.0

# Create extension directory structure
mkdir -p extension/code_navigator/src
mkdir -p extension/code_navigator/test
mkdir -p extension/code_navigator/include
```

### 2. Initial Extension Skeleton

Create `extension/code_navigator/CMakeLists.txt`:

```cmake
cmake_minimum_required(VERSION 3.5)
project(code_navigator)

include(../../duckdb_extension.cmake)

# Find and configure Tree-sitter
find_package(PkgConfig REQUIRED)
pkg_check_modules(TREE_SITTER REQUIRED tree-sitter)

set(EXTENSION_NAME ${PROJECT_NAME})
set(EXTENSION_SOURCES 
    src/code_navigator_extension.cpp
    src/ast_parser.cpp
    src/read_ast_function.cpp
)

build_duckdb_extension(${EXTENSION_NAME} ${EXTENSION_SOURCES})

# Link Tree-sitter
target_include_directories(${EXTENSION_NAME} PRIVATE ${TREE_SITTER_INCLUDE_DIRS})
target_link_libraries(${EXTENSION_NAME} PRIVATE ${TREE_SITTER_LIBRARIES})

# Install Tree-sitter Python grammar
# TODO: Add grammar installation logic
```

### 3. Minimal Extension Entry Point

Create `src/code_navigator_extension.cpp`:

```cpp
#include "duckdb.hpp"
#include "duckdb/main/extension_util.hpp"

namespace duckdb {

class CodeNavigatorExtension : public Extension {
public:
    void Load(DuckDB &db) override;
    std::string Name() override { return "code_navigator"; }
    std::string Version() override { return "0.1.0"; }
};

void CodeNavigatorExtension::Load(DuckDB &db) {
    // Register the read_ast function
    auto &catalog = Catalog::GetSystemCatalog(*db.instance);
    
    // TODO: Register read_ast function
    Connection con(db);
    con.Query("CREATE SCHEMA IF NOT EXISTS code_navigator;");
}

extern "C" {
DUCKDB_EXTENSION_API void code_navigator_init(duckdb::DatabaseInstance &db) {
    LoadExtension<CodeNavigatorExtension>(db);
}

DUCKDB_EXTENSION_API const char *code_navigator_version() {
    return "0.1.0";
}
}

} // namespace duckdb
```

### 4. Build System Integration

Create a build script `build.sh`:

```bash
#!/bin/bash
set -e

# Build DuckDB first (if not already built)
if [ ! -f "build/release/duckdb" ]; then
    make -j$(nproc)
fi

# Build the extension
mkdir -p build/release/extension/code_navigator
cd build/release/extension/code_navigator
cmake -DCMAKE_BUILD_TYPE=Release ../../../../extension/code_navigator
make -j$(nproc)

echo "Extension built successfully!"
echo "Load in DuckDB with: LOAD 'build/release/extension/code_navigator/code_navigator.duckdb_extension';"
```

### 5. Tree-sitter Integration Setup

Install Tree-sitter and Python grammar:

```bash
# Install Tree-sitter library
git clone https://github.com/tree-sitter/tree-sitter.git
cd tree-sitter
make
sudo make install

# Get Python grammar
git clone https://github.com/tree-sitter/tree-sitter-python.git
cd tree-sitter-python
npm install
npm run build

# Copy the parser to your extension
cp src/parser.c ../extension/code_navigator/src/tree_sitter_python.c
```

### 6. Development Workflow

1. **Incremental Development Cycle**:
   ```bash
   # Edit code
   vim extension/code_navigator/src/read_ast_function.cpp
   
   # Rebuild just the extension
   cd build/release/extension/code_navigator
   make
   
   # Test in DuckDB CLI
   ../../../duckdb
   > LOAD 'extension/code_navigator/code_navigator.duckdb_extension';
   > SELECT * FROM read_ast('test.py', 'python') LIMIT 10;
   ```

2. **Debugging Setup**:
   ```bash
   # Build with debug symbols
   cmake -DCMAKE_BUILD_TYPE=Debug ../../../../extension/code_navigator
   
   # Run with GDB
   gdb ../../../duckdb
   (gdb) run
   > LOAD 'extension/code_navigator/code_navigator.duckdb_extension';
   ```

### 7. Testing Infrastructure

Create `test/sql/basic.test`:

```
# Basic read_ast tests

statement ok
LOAD '../../build/release/extension/code_navigator/code_navigator.duckdb_extension';

# Test empty file
query I
SELECT COUNT(*) FROM read_ast('', 'python');
----
1

# Test simple function
query IIII
SELECT type, name, start_line, end_line 
FROM read_ast('def foo(): pass', 'python')
WHERE type = 'function_definition';
----
function_definition	foo	1	1
```

Run tests:
```bash
cd build/release
./test/unittest --test-dir=../../extension/code_navigator/test/sql
```

### 8. Key Implementation Decisions

Before proceeding, consider these architectural choices:

1. **Virtual Table vs. Table Function**: 
   - Table function (recommended): Simpler, works well with parameters
   - Virtual table: More complex but allows indexing

2. **Memory Management Strategy**:
   - Option A: Parse on-demand, no caching
   - Option B: Cache parsed ASTs per query
   - Option C: Global LRU cache across queries

3. **Node ID Scheme**:
   - Option A: Sequential numbers (simple but not stable)
   - Option B: Content hash (stable but more complex)
   - Option C: Hierarchical path encoding

4. **Error Handling**:
   - Parse errors: Return partial AST with error nodes?
   - File errors: Throw exception or return empty result?

### 9. Recommended Next Steps

1. **Week 1**: Get basic `read_ast()` working with hardcoded Python support
2. **Week 2**: Add source text extraction and proper error handling
3. **Week 3**: Implement filtered functions (ast_functions, ast_classes)
4. **Week 4**: Add comprehensive test suite and performance benchmarks

### Critical Questions for Implementation

1. **Build System**: Should we use DuckDB's extension template or create a standalone CMake project?

2. **Tree-sitter Grammars**: Bundle grammars with the extension or load dynamically at runtime?

3. **Platform Support**: Focus on Linux/macOS first or ensure Windows compatibility from the start?

4. **Version Compatibility**: Target latest DuckDB only or maintain backward compatibility?

5. **Distribution**: Plan for inclusion in DuckDB Community Extensions repository?

