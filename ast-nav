#!/bin/bash

# AST Navigator - Ergonomic CLI for semantic code navigation
# Usage: ./ast-nav <command> [args...]

DUCKDB="./build/release/duckdb"
SQL_LIB="ast-navigator.sql"

# Check if DuckDB exists
if [[ ! -f "$DUCKDB" ]]; then
    echo "Error: DuckDB not found at $DUCKDB"
    echo "Run 'make' to build the extension first"
    exit 1
fi

# Check if SQL library exists
if [[ ! -f "$SQL_LIB" ]]; then
    echo "Error: SQL library not found at $SQL_LIB"
    exit 1
fi

# Function to execute SQL query
run_query() {
    local query="$1"
    $DUCKDB -init "$SQL_LIB" -column -s "$query"
}

# Parse command and arguments
case "${1:-help}" in
    "functions"|"funcs")
        # Find functions: ast-nav functions "src/**/*.py" [name_pattern]
        if [[ -z "$2" ]]; then
            echo "Usage: ast-nav functions <file_pattern> [name_pattern]"
            echo "Example: ast-nav functions 'src/**/*.py' 'parse*'"
            exit 1
        fi
        if [[ -n "$3" ]]; then
            query="SELECT * FROM ast_find_functions_named('$2', '$3');"
        else
            query="SELECT * FROM ast_find_functions('$2');"
        fi
        ;;
        
    "classes")
        # Find classes: ast-nav classes "src/**/*.py" [name_pattern]
        if [[ -z "$2" ]]; then
            echo "Usage: ast-nav classes <file_pattern> [name_pattern]"
            echo "Example: ast-nav classes 'src/**/*.cpp' 'AST*'"
            exit 1
        fi
        if [[ -n "$3" ]]; then
            query="SELECT * FROM ast_find_classes_named('$2', '$3');"
        else
            query="SELECT * FROM ast_find_classes('$2');"
        fi
        ;;
        
    "variables"|"vars")
        # Find variables: ast-nav variables "src/**/*.js" [name_pattern]
        if [[ -z "$2" ]]; then
            echo "Usage: ast-nav variables <file_pattern> [name_pattern]"
            echo "Example: ast-nav variables 'src/**/*.js' 'config*'"
            exit 1
        fi
        if [[ -n "$3" ]]; then
            query="SELECT * FROM ast_find_variables_named('$2', '$3');"
        else
            query="SELECT * FROM ast_find_variables('$2');"
        fi
        ;;
        
    "body")
        # Get function body: ast-nav body "ParseToASTResult" "src/**/*.cpp"
        if [[ -z "$2" || -z "$3" ]]; then
            echo "Usage: ast-nav body <function_name> <file_pattern>"
            echo "Example: ast-nav body 'ParseToASTResult' 'src/**/*.cpp'"
            exit 1
        fi
        query="SELECT * FROM ast_get_function_body('$2', '$3');"
        ;;
        
    "signature"|"sig")
        # Get function signature: ast-nav signature "ParseToASTResult" ["src/**/*.cpp"]
        if [[ -z "$2" ]]; then
            echo "Usage: ast-nav signature <function_name> [file_pattern]"
            echo "Example: ast-nav signature 'ParseToASTResult'"
            exit 1
        fi
        query="SELECT * FROM ast_get_function_signature('$2');"
        ;;
        
    "calls")
        # Find function calls: ast-nav calls "ParseToASTResult" ["src/**/*.cpp"]
        if [[ -z "$2" ]]; then
            echo "Usage: ast-nav calls <function_name> [file_pattern]"
            echo "Example: ast-nav calls 'ParseToASTResult'"
            exit 1
        fi
        if [[ -n "$3" ]]; then
            query="SELECT * FROM ast_find_function_calls_in('$2', '$3');"
        else
            query="SELECT * FROM ast_find_function_calls('$2');"
        fi
        ;;
        
    "refs"|"references")
        # Find references: ast-nav refs "ASTResult" ["src/**/*.cpp"]
        if [[ -z "$2" ]]; then
            echo "Usage: ast-nav refs <symbol_name> [file_pattern]"
            echo "Example: ast-nav refs 'ASTResult' 'src/**/*.hpp'"
            exit 1
        fi
        if [[ -n "$3" ]]; then
            query="SELECT * FROM ast_find_references_in('$2', '$3');"
        else
            query="SELECT * FROM ast_find_references('$2');"
        fi
        ;;
        
    "structure"|"struct")
        # Get code structure: ast-nav structure "src/**/*.py" [max_depth]
        if [[ -z "$2" ]]; then
            echo "Usage: ast-nav structure <file_pattern> [max_depth]"
            echo "Example: ast-nav structure 'src/**/*.py' 3"
            exit 1
        fi
        if [[ -n "$3" ]]; then
            query="SELECT * FROM ast_get_structure_depth('$2', $3);"
        else
            query="SELECT * FROM ast_get_structure('$2');"
        fi
        ;;
        
    "imports")
        # Get imports: ast-nav imports "src/**/*.py"
        if [[ -z "$2" ]]; then
            echo "Usage: ast-nav imports <file_pattern>"
            echo "Example: ast-nav imports 'src/**/*.py'"
            exit 1
        fi
        query="SELECT * FROM ast_get_imports('$2');"
        ;;
        
    "complexity"|"metrics")
        # Get complexity metrics: ast-nav complexity "src/**/*.py"
        if [[ -z "$2" ]]; then
            echo "Usage: ast-nav complexity <file_pattern>"
            echo "Example: ast-nav complexity 'src/**/*.cpp'"
            exit 1
        fi
        query="SELECT * FROM ast_get_complexity('$2');"
        ;;
        
    "complex")
        # Find complex functions: ast-nav complex "src/**/*.py" [min_lines] [min_children]
        if [[ -z "$2" ]]; then
            echo "Usage: ast-nav complex <file_pattern> [min_lines] [min_children]"
            echo "Example: ast-nav complex 'src/**/*.py' 50 20"
            exit 1
        fi
        if [[ -n "$3" && -n "$4" ]]; then
            query="SELECT * FROM ast_find_complex_functions_custom('$2', $3, $4);"
        else
            query="SELECT * FROM ast_find_complex_functions('$2');"
        fi
        ;;
        
    "patterns")
        # Search patterns: ast-nav patterns "src/**/*.js" "if_statement,for_statement"
        if [[ -z "$2" || -z "$3" ]]; then
            echo "Usage: ast-nav patterns <file_pattern> <pattern_types>"
            echo "Example: ast-nav patterns 'src/**/*.js' 'if_statement,for_statement,try_statement'"
            exit 1
        fi
        query="SELECT * FROM ast_search_patterns('$2', '$3');"
        ;;
        
    "errors")
        # Find error handling: ast-nav errors "src/**/*.py"
        if [[ -z "$2" ]]; then
            echo "Usage: ast-nav errors <file_pattern>"
            echo "Example: ast-nav errors 'src/**/*.py'"
            exit 1
        fi
        query="SELECT * FROM ast_find_error_handling('$2');"
        ;;
        
    "summary")
        # File summary: ast-nav summary "src/unified_ast_backend.cpp"
        if [[ -z "$2" ]]; then
            echo "Usage: ast-nav summary <file_path>"
            echo "Example: ast-nav summary 'src/unified_ast_backend.cpp'"
            exit 1
        fi
        query="SELECT * FROM ast_file_summary('$2');"
        ;;
        
    "languages"|"langs")
        # List supported languages
        query="SELECT * FROM ast_supported_languages();"
        ;;
        
    "extract")
        # Extract function source code to stdout
        if [[ -z "$2" ]]; then
            echo "Usage: ast-nav extract <function_name> [file_pattern]"
            echo "Example: ast-nav extract 'ParseToASTResult' 'src/**/*.cpp'"
            exit 1
        fi
        file_pattern="${3:-%}"
        
        # First get the function location
        result=$(run_query "SELECT file_path, start_line, end_line FROM ast_get_function_body('$2', '$file_pattern') LIMIT 1;")
        
        if [[ -z "$result" || "$result" == *"Empty result set"* ]]; then
            echo "Function '$2' not found in pattern '$file_pattern'"
            exit 1
        fi
        
        # Parse the result to extract file_path, start_line, end_line
        file_path=$(echo "$result" | tail -n +3 | head -n 1 | awk '{print $1}')
        start_line=$(echo "$result" | tail -n +3 | head -n 1 | awk '{print $2}')
        end_line=$(echo "$result" | tail -n +3 | head -n 1 | awk '{print $3}')
        
        if [[ -f "$file_path" ]]; then
            echo "// Function: $2"
            echo "// File: $file_path"
            echo "// Lines: $start_line-$end_line"
            echo ""
            sed -n "${start_line},${end_line}p" "$file_path"
        else
            echo "File not found: $file_path"
            exit 1
        fi
        exit 0
        ;;
        
    "query"|"sql")
        # Execute custom SQL: ast-nav query "SELECT ..."
        if [[ -z "$2" ]]; then
            echo "Usage: ast-nav query '<SQL_query>'"
            echo "Example: ast-nav query \"SELECT file_path, COUNT(*) FROM read_ast('src/*.py') GROUP BY file_path;\""
            exit 1
        fi
        query="$2"
        ;;
        
    "help"|"-h"|"--help")
        cat << 'EOF'
AST Navigator - Semantic Code Navigation Tool

COMMANDS:
  functions <pattern> [name]     Find functions matching pattern
  classes <pattern> [name]       Find classes matching pattern  
  variables <pattern> [name]     Find variables matching pattern
  body <func_name> [pattern]     Get function body info
  signature <func_name> [pattern] Get function signature
  calls <func_name> [pattern]    Find function calls
  refs <symbol> [pattern]        Find symbol references
  structure <pattern> [depth]    Get code structure
  imports <pattern>              Get import statements
  complexity <pattern>           Get complexity metrics
  complex <pattern> [lines] [children] Find complex functions
  patterns <pattern> <types>     Search for node patterns
  errors <pattern>               Find error handling patterns
  summary <file>                 Get file summary
  extract <func_name> [pattern]  Extract function source code
  languages                      List supported languages
  query '<SQL>'                  Execute custom SQL query

EXAMPLES:
  ast-nav functions "src/**/*.py" "parse*"
  ast-nav classes "**/*.cpp" "AST*"
  ast-nav body "ParseToASTResult"
  ast-nav refs "ASTResult" "src/**/*.hpp"
  ast-nav extract "main" "*.cpp"
  ast-nav complexity "src/**/*.py"
  ast-nav patterns "**/*.js" "if_statement,for_statement"

FILE PATTERNS:
  "file.py"           Single file
  "src/*.py"          Files in directory
  "src/**/*.py"       Recursive search
  "**/*.{py,js}"      Multiple extensions

For more details, see ast-navigator.sql
EOF
        exit 0
        ;;
        
    *)
        echo "Unknown command: $1"
        echo "Run 'ast-nav help' for usage information"
        exit 1
        ;;
esac

# Execute the query
run_query "$query"